// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genomicsdb_import_config.proto

#ifndef PROTOBUF_genomicsdb_5fimport_5fconfig_2eproto__INCLUDED
#define PROTOBUF_genomicsdb_5fimport_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_genomicsdb_5fimport_5fconfig_2eproto();
void protobuf_AssignDesc_genomicsdb_5fimport_5fconfig_2eproto();
void protobuf_ShutdownFile_genomicsdb_5fimport_5fconfig_2eproto();

class GATK4Integration;
class ImportConfiguration;
class Partition;

// ===================================================================

class Partition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Partition) */ {
 public:
  Partition();
  virtual ~Partition();

  Partition(const Partition& from);

  inline Partition& operator=(const Partition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Partition& default_instance();

  void Swap(Partition* other);

  // implements Message ----------------------------------------------

  inline Partition* New() const { return New(NULL); }

  Partition* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Partition& from);
  void MergeFrom(const Partition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Partition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 begin = 1;
  bool has_begin() const;
  void clear_begin();
  static const int kBeginFieldNumber = 1;
  ::google::protobuf::int64 begin() const;
  void set_begin(::google::protobuf::int64 value);

  // optional string workspace = 2;
  bool has_workspace() const;
  void clear_workspace();
  static const int kWorkspaceFieldNumber = 2;
  const ::std::string& workspace() const;
  void set_workspace(const ::std::string& value);
  void set_workspace(const char* value);
  void set_workspace(const char* value, size_t size);
  ::std::string* mutable_workspace();
  ::std::string* release_workspace();
  void set_allocated_workspace(::std::string* workspace);

  // optional string array = 3;
  bool has_array() const;
  void clear_array();
  static const int kArrayFieldNumber = 3;
  const ::std::string& array() const;
  void set_array(const ::std::string& value);
  void set_array(const char* value);
  void set_array(const char* value, size_t size);
  ::std::string* mutable_array();
  ::std::string* release_array();
  void set_allocated_array(::std::string* array);

  // optional string vcf_output_filename = 4;
  bool has_vcf_output_filename() const;
  void clear_vcf_output_filename();
  static const int kVcfOutputFilenameFieldNumber = 4;
  const ::std::string& vcf_output_filename() const;
  void set_vcf_output_filename(const ::std::string& value);
  void set_vcf_output_filename(const char* value);
  void set_vcf_output_filename(const char* value, size_t size);
  ::std::string* mutable_vcf_output_filename();
  ::std::string* release_vcf_output_filename();
  void set_allocated_vcf_output_filename(::std::string* vcf_output_filename);

  // optional int64 end = 5 [default = 9223372036854775807];
  bool has_end() const;
  void clear_end();
  static const int kEndFieldNumber = 5;
  ::google::protobuf::int64 end() const;
  void set_end(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:Partition)
 private:
  inline void set_has_begin();
  inline void clear_has_begin();
  inline void set_has_workspace();
  inline void clear_has_workspace();
  inline void set_has_array();
  inline void clear_has_array();
  inline void set_has_vcf_output_filename();
  inline void clear_has_vcf_output_filename();
  inline void set_has_end();
  inline void clear_has_end();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 begin_;
  ::google::protobuf::internal::ArenaStringPtr workspace_;
  ::google::protobuf::internal::ArenaStringPtr array_;
  ::google::protobuf::internal::ArenaStringPtr vcf_output_filename_;
  ::google::protobuf::int64 end_;
  friend void  protobuf_AddDesc_genomicsdb_5fimport_5fconfig_2eproto();
  friend void protobuf_AssignDesc_genomicsdb_5fimport_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_genomicsdb_5fimport_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static Partition* default_instance_;
};
// -------------------------------------------------------------------

class GATK4Integration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:GATK4Integration) */ {
 public:
  GATK4Integration();
  virtual ~GATK4Integration();

  GATK4Integration(const GATK4Integration& from);

  inline GATK4Integration& operator=(const GATK4Integration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GATK4Integration& default_instance();

  void Swap(GATK4Integration* other);

  // implements Message ----------------------------------------------

  inline GATK4Integration* New() const { return New(NULL); }

  GATK4Integration* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GATK4Integration& from);
  void MergeFrom(const GATK4Integration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GATK4Integration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string output_vidmap_json_file = 1;
  bool has_output_vidmap_json_file() const;
  void clear_output_vidmap_json_file();
  static const int kOutputVidmapJsonFileFieldNumber = 1;
  const ::std::string& output_vidmap_json_file() const;
  void set_output_vidmap_json_file(const ::std::string& value);
  void set_output_vidmap_json_file(const char* value);
  void set_output_vidmap_json_file(const char* value, size_t size);
  ::std::string* mutable_output_vidmap_json_file();
  ::std::string* release_output_vidmap_json_file();
  void set_allocated_output_vidmap_json_file(::std::string* output_vidmap_json_file);

  // optional string output_callsetmap_json_file = 2;
  bool has_output_callsetmap_json_file() const;
  void clear_output_callsetmap_json_file();
  static const int kOutputCallsetmapJsonFileFieldNumber = 2;
  const ::std::string& output_callsetmap_json_file() const;
  void set_output_callsetmap_json_file(const ::std::string& value);
  void set_output_callsetmap_json_file(const char* value);
  void set_output_callsetmap_json_file(const char* value, size_t size);
  ::std::string* mutable_output_callsetmap_json_file();
  ::std::string* release_output_callsetmap_json_file();
  void set_allocated_output_callsetmap_json_file(::std::string* output_callsetmap_json_file);

  // optional int32 batch_size = 3 [default = 0];
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 3;
  ::google::protobuf::int32 batch_size() const;
  void set_batch_size(::google::protobuf::int32 value);

  // optional bool use_samples_in_order_provided = 4 [default = false];
  bool has_use_samples_in_order_provided() const;
  void clear_use_samples_in_order_provided();
  static const int kUseSamplesInOrderProvidedFieldNumber = 4;
  bool use_samples_in_order_provided() const;
  void set_use_samples_in_order_provided(bool value);

  // optional int64 lower_sample_index = 5 [default = 0];
  bool has_lower_sample_index() const;
  void clear_lower_sample_index();
  static const int kLowerSampleIndexFieldNumber = 5;
  ::google::protobuf::int64 lower_sample_index() const;
  void set_lower_sample_index(::google::protobuf::int64 value);

  // optional int64 upper_sample_index = 6 [default = 9223372036854775807];
  bool has_upper_sample_index() const;
  void clear_upper_sample_index();
  static const int kUpperSampleIndexFieldNumber = 6;
  ::google::protobuf::int64 upper_sample_index() const;
  void set_upper_sample_index(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GATK4Integration)
 private:
  inline void set_has_output_vidmap_json_file();
  inline void clear_has_output_vidmap_json_file();
  inline void set_has_output_callsetmap_json_file();
  inline void clear_has_output_callsetmap_json_file();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_use_samples_in_order_provided();
  inline void clear_has_use_samples_in_order_provided();
  inline void set_has_lower_sample_index();
  inline void clear_has_lower_sample_index();
  inline void set_has_upper_sample_index();
  inline void clear_has_upper_sample_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr output_vidmap_json_file_;
  ::google::protobuf::internal::ArenaStringPtr output_callsetmap_json_file_;
  ::google::protobuf::int32 batch_size_;
  bool use_samples_in_order_provided_;
  ::google::protobuf::int64 lower_sample_index_;
  ::google::protobuf::int64 upper_sample_index_;
  friend void  protobuf_AddDesc_genomicsdb_5fimport_5fconfig_2eproto();
  friend void protobuf_AssignDesc_genomicsdb_5fimport_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_genomicsdb_5fimport_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static GATK4Integration* default_instance_;
};
// -------------------------------------------------------------------

class ImportConfiguration : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ImportConfiguration) */ {
 public:
  ImportConfiguration();
  virtual ~ImportConfiguration();

  ImportConfiguration(const ImportConfiguration& from);

  inline ImportConfiguration& operator=(const ImportConfiguration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImportConfiguration& default_instance();

  void Swap(ImportConfiguration* other);

  // implements Message ----------------------------------------------

  inline ImportConfiguration* New() const { return New(NULL); }

  ImportConfiguration* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImportConfiguration& from);
  void MergeFrom(const ImportConfiguration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImportConfiguration* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 size_per_column_partition = 7 [default = 16384];
  bool has_size_per_column_partition() const;
  void clear_size_per_column_partition();
  static const int kSizePerColumnPartitionFieldNumber = 7;
  ::google::protobuf::int64 size_per_column_partition() const;
  void set_size_per_column_partition(::google::protobuf::int64 value);

  // optional bool row_based_partitioning = 1 [default = false];
  bool has_row_based_partitioning() const;
  void clear_row_based_partitioning();
  static const int kRowBasedPartitioningFieldNumber = 1;
  bool row_based_partitioning() const;
  void set_row_based_partitioning(bool value);

  // optional bool produce_combined_vcf = 2 [default = false];
  bool has_produce_combined_vcf() const;
  void clear_produce_combined_vcf();
  static const int kProduceCombinedVcfFieldNumber = 2;
  bool produce_combined_vcf() const;
  void set_produce_combined_vcf(bool value);

  // optional bool produce_tiledb_array = 3 [default = true];
  bool has_produce_tiledb_array() const;
  void clear_produce_tiledb_array();
  static const int kProduceTiledbArrayFieldNumber = 3;
  bool produce_tiledb_array() const;
  void set_produce_tiledb_array(bool value);

  // repeated .Partition column_partitions = 4;
  int column_partitions_size() const;
  void clear_column_partitions();
  static const int kColumnPartitionsFieldNumber = 4;
  const ::Partition& column_partitions(int index) const;
  ::Partition* mutable_column_partitions(int index);
  ::Partition* add_column_partitions();
  ::google::protobuf::RepeatedPtrField< ::Partition >*
      mutable_column_partitions();
  const ::google::protobuf::RepeatedPtrField< ::Partition >&
      column_partitions() const;

  // optional string vid_mapping_file = 5;
  bool has_vid_mapping_file() const;
  void clear_vid_mapping_file();
  static const int kVidMappingFileFieldNumber = 5;
  const ::std::string& vid_mapping_file() const;
  void set_vid_mapping_file(const ::std::string& value);
  void set_vid_mapping_file(const char* value);
  void set_vid_mapping_file(const char* value, size_t size);
  ::std::string* mutable_vid_mapping_file();
  ::std::string* release_vid_mapping_file();
  void set_allocated_vid_mapping_file(::std::string* vid_mapping_file);

  // optional string callset_mapping_file = 6;
  bool has_callset_mapping_file() const;
  void clear_callset_mapping_file();
  static const int kCallsetMappingFileFieldNumber = 6;
  const ::std::string& callset_mapping_file() const;
  void set_callset_mapping_file(const ::std::string& value);
  void set_callset_mapping_file(const char* value);
  void set_callset_mapping_file(const char* value, size_t size);
  ::std::string* mutable_callset_mapping_file();
  ::std::string* release_callset_mapping_file();
  void set_allocated_callset_mapping_file(::std::string* callset_mapping_file);

  // optional bool treat_deletions_as_intervals = 8 [default = true];
  bool has_treat_deletions_as_intervals() const;
  void clear_treat_deletions_as_intervals();
  static const int kTreatDeletionsAsIntervalsFieldNumber = 8;
  bool treat_deletions_as_intervals() const;
  void set_treat_deletions_as_intervals(bool value);

  // optional int32 num_parallel_vcf_files = 9 [default = 1];
  bool has_num_parallel_vcf_files() const;
  void clear_num_parallel_vcf_files();
  static const int kNumParallelVcfFilesFieldNumber = 9;
  ::google::protobuf::int32 num_parallel_vcf_files() const;
  void set_num_parallel_vcf_files(::google::protobuf::int32 value);

  // optional bool delete_and_create_tiledb_array = 10 [default = false];
  bool has_delete_and_create_tiledb_array() const;
  void clear_delete_and_create_tiledb_array();
  static const int kDeleteAndCreateTiledbArrayFieldNumber = 10;
  bool delete_and_create_tiledb_array() const;
  void set_delete_and_create_tiledb_array(bool value);

  // optional bool do_ping_pong_buffering = 11 [default = true];
  bool has_do_ping_pong_buffering() const;
  void clear_do_ping_pong_buffering();
  static const int kDoPingPongBufferingFieldNumber = 11;
  bool do_ping_pong_buffering() const;
  void set_do_ping_pong_buffering(bool value);

  // optional bool offload_vcf_output_processing = 12 [default = true];
  bool has_offload_vcf_output_processing() const;
  void clear_offload_vcf_output_processing();
  static const int kOffloadVcfOutputProcessingFieldNumber = 12;
  bool offload_vcf_output_processing() const;
  void set_offload_vcf_output_processing(bool value);

  // optional bool discard_vcf_index = 13 [default = true];
  bool has_discard_vcf_index() const;
  void clear_discard_vcf_index();
  static const int kDiscardVcfIndexFieldNumber = 13;
  bool discard_vcf_index() const;
  void set_discard_vcf_index(bool value);

  // optional int64 segment_size = 14 [default = 10485760];
  bool has_segment_size() const;
  void clear_segment_size();
  static const int kSegmentSizeFieldNumber = 14;
  ::google::protobuf::int64 segment_size() const;
  void set_segment_size(::google::protobuf::int64 value);

  // optional bool compress_tiledb_array = 15 [default = true];
  bool has_compress_tiledb_array() const;
  void clear_compress_tiledb_array();
  static const int kCompressTiledbArrayFieldNumber = 15;
  bool compress_tiledb_array() const;
  void set_compress_tiledb_array(bool value);

  // optional int64 num_cells_per_tile = 16 [default = 1000];
  bool has_num_cells_per_tile() const;
  void clear_num_cells_per_tile();
  static const int kNumCellsPerTileFieldNumber = 16;
  ::google::protobuf::int64 num_cells_per_tile() const;
  void set_num_cells_per_tile(::google::protobuf::int64 value);

  // optional bool fail_if_updating = 17 [default = false];
  bool has_fail_if_updating() const;
  void clear_fail_if_updating();
  static const int kFailIfUpdatingFieldNumber = 17;
  bool fail_if_updating() const;
  void set_fail_if_updating(bool value);

  // optional .GATK4Integration gatk4_integration_parameters = 18;
  bool has_gatk4_integration_parameters() const;
  void clear_gatk4_integration_parameters();
  static const int kGatk4IntegrationParametersFieldNumber = 18;
  const ::GATK4Integration& gatk4_integration_parameters() const;
  ::GATK4Integration* mutable_gatk4_integration_parameters();
  ::GATK4Integration* release_gatk4_integration_parameters();
  void set_allocated_gatk4_integration_parameters(::GATK4Integration* gatk4_integration_parameters);

  // optional int32 tiledb_compression_level = 19 [default = -1];
  bool has_tiledb_compression_level() const;
  void clear_tiledb_compression_level();
  static const int kTiledbCompressionLevelFieldNumber = 19;
  ::google::protobuf::int32 tiledb_compression_level() const;
  void set_tiledb_compression_level(::google::protobuf::int32 value);

  // optional bool consolidate_tiledb_array_after_load = 20 [default = false];
  bool has_consolidate_tiledb_array_after_load() const;
  void clear_consolidate_tiledb_array_after_load();
  static const int kConsolidateTiledbArrayAfterLoadFieldNumber = 20;
  bool consolidate_tiledb_array_after_load() const;
  void set_consolidate_tiledb_array_after_load(bool value);

  // optional bool disable_synced_writes = 21 [default = true];
  bool has_disable_synced_writes() const;
  void clear_disable_synced_writes();
  static const int kDisableSyncedWritesFieldNumber = 21;
  bool disable_synced_writes() const;
  void set_disable_synced_writes(bool value);

  // optional bool ignore_cells_not_in_partition = 22;
  bool has_ignore_cells_not_in_partition() const;
  void clear_ignore_cells_not_in_partition();
  static const int kIgnoreCellsNotInPartitionFieldNumber = 22;
  bool ignore_cells_not_in_partition() const;
  void set_ignore_cells_not_in_partition(bool value);

  // @@protoc_insertion_point(class_scope:ImportConfiguration)
 private:
  inline void set_has_size_per_column_partition();
  inline void clear_has_size_per_column_partition();
  inline void set_has_row_based_partitioning();
  inline void clear_has_row_based_partitioning();
  inline void set_has_produce_combined_vcf();
  inline void clear_has_produce_combined_vcf();
  inline void set_has_produce_tiledb_array();
  inline void clear_has_produce_tiledb_array();
  inline void set_has_vid_mapping_file();
  inline void clear_has_vid_mapping_file();
  inline void set_has_callset_mapping_file();
  inline void clear_has_callset_mapping_file();
  inline void set_has_treat_deletions_as_intervals();
  inline void clear_has_treat_deletions_as_intervals();
  inline void set_has_num_parallel_vcf_files();
  inline void clear_has_num_parallel_vcf_files();
  inline void set_has_delete_and_create_tiledb_array();
  inline void clear_has_delete_and_create_tiledb_array();
  inline void set_has_do_ping_pong_buffering();
  inline void clear_has_do_ping_pong_buffering();
  inline void set_has_offload_vcf_output_processing();
  inline void clear_has_offload_vcf_output_processing();
  inline void set_has_discard_vcf_index();
  inline void clear_has_discard_vcf_index();
  inline void set_has_segment_size();
  inline void clear_has_segment_size();
  inline void set_has_compress_tiledb_array();
  inline void clear_has_compress_tiledb_array();
  inline void set_has_num_cells_per_tile();
  inline void clear_has_num_cells_per_tile();
  inline void set_has_fail_if_updating();
  inline void clear_has_fail_if_updating();
  inline void set_has_gatk4_integration_parameters();
  inline void clear_has_gatk4_integration_parameters();
  inline void set_has_tiledb_compression_level();
  inline void clear_has_tiledb_compression_level();
  inline void set_has_consolidate_tiledb_array_after_load();
  inline void clear_has_consolidate_tiledb_array_after_load();
  inline void set_has_disable_synced_writes();
  inline void clear_has_disable_synced_writes();
  inline void set_has_ignore_cells_not_in_partition();
  inline void clear_has_ignore_cells_not_in_partition();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 size_per_column_partition_;
  ::google::protobuf::RepeatedPtrField< ::Partition > column_partitions_;
  bool row_based_partitioning_;
  bool produce_combined_vcf_;
  bool produce_tiledb_array_;
  bool treat_deletions_as_intervals_;
  ::google::protobuf::int32 num_parallel_vcf_files_;
  ::google::protobuf::internal::ArenaStringPtr vid_mapping_file_;
  ::google::protobuf::internal::ArenaStringPtr callset_mapping_file_;
  ::google::protobuf::int64 segment_size_;
  bool delete_and_create_tiledb_array_;
  bool do_ping_pong_buffering_;
  bool offload_vcf_output_processing_;
  bool discard_vcf_index_;
  bool compress_tiledb_array_;
  bool fail_if_updating_;
  bool consolidate_tiledb_array_after_load_;
  bool disable_synced_writes_;
  ::google::protobuf::int64 num_cells_per_tile_;
  ::GATK4Integration* gatk4_integration_parameters_;
  ::google::protobuf::int32 tiledb_compression_level_;
  bool ignore_cells_not_in_partition_;
  friend void  protobuf_AddDesc_genomicsdb_5fimport_5fconfig_2eproto();
  friend void protobuf_AssignDesc_genomicsdb_5fimport_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_genomicsdb_5fimport_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static ImportConfiguration* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Partition

// required int64 begin = 1;
inline bool Partition::has_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Partition::set_has_begin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Partition::clear_has_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Partition::clear_begin() {
  begin_ = GOOGLE_LONGLONG(0);
  clear_has_begin();
}
inline ::google::protobuf::int64 Partition::begin() const {
  // @@protoc_insertion_point(field_get:Partition.begin)
  return begin_;
}
inline void Partition::set_begin(::google::protobuf::int64 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:Partition.begin)
}

// optional string workspace = 2;
inline bool Partition::has_workspace() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Partition::set_has_workspace() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Partition::clear_has_workspace() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Partition::clear_workspace() {
  workspace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_workspace();
}
inline const ::std::string& Partition::workspace() const {
  // @@protoc_insertion_point(field_get:Partition.workspace)
  return workspace_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Partition::set_workspace(const ::std::string& value) {
  set_has_workspace();
  workspace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Partition.workspace)
}
inline void Partition::set_workspace(const char* value) {
  set_has_workspace();
  workspace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Partition.workspace)
}
inline void Partition::set_workspace(const char* value, size_t size) {
  set_has_workspace();
  workspace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Partition.workspace)
}
inline ::std::string* Partition::mutable_workspace() {
  set_has_workspace();
  // @@protoc_insertion_point(field_mutable:Partition.workspace)
  return workspace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Partition::release_workspace() {
  // @@protoc_insertion_point(field_release:Partition.workspace)
  clear_has_workspace();
  return workspace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Partition::set_allocated_workspace(::std::string* workspace) {
  if (workspace != NULL) {
    set_has_workspace();
  } else {
    clear_has_workspace();
  }
  workspace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workspace);
  // @@protoc_insertion_point(field_set_allocated:Partition.workspace)
}

// optional string array = 3;
inline bool Partition::has_array() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Partition::set_has_array() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Partition::clear_has_array() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Partition::clear_array() {
  array_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_array();
}
inline const ::std::string& Partition::array() const {
  // @@protoc_insertion_point(field_get:Partition.array)
  return array_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Partition::set_array(const ::std::string& value) {
  set_has_array();
  array_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Partition.array)
}
inline void Partition::set_array(const char* value) {
  set_has_array();
  array_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Partition.array)
}
inline void Partition::set_array(const char* value, size_t size) {
  set_has_array();
  array_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Partition.array)
}
inline ::std::string* Partition::mutable_array() {
  set_has_array();
  // @@protoc_insertion_point(field_mutable:Partition.array)
  return array_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Partition::release_array() {
  // @@protoc_insertion_point(field_release:Partition.array)
  clear_has_array();
  return array_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Partition::set_allocated_array(::std::string* array) {
  if (array != NULL) {
    set_has_array();
  } else {
    clear_has_array();
  }
  array_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), array);
  // @@protoc_insertion_point(field_set_allocated:Partition.array)
}

// optional string vcf_output_filename = 4;
inline bool Partition::has_vcf_output_filename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Partition::set_has_vcf_output_filename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Partition::clear_has_vcf_output_filename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Partition::clear_vcf_output_filename() {
  vcf_output_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vcf_output_filename();
}
inline const ::std::string& Partition::vcf_output_filename() const {
  // @@protoc_insertion_point(field_get:Partition.vcf_output_filename)
  return vcf_output_filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Partition::set_vcf_output_filename(const ::std::string& value) {
  set_has_vcf_output_filename();
  vcf_output_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Partition.vcf_output_filename)
}
inline void Partition::set_vcf_output_filename(const char* value) {
  set_has_vcf_output_filename();
  vcf_output_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Partition.vcf_output_filename)
}
inline void Partition::set_vcf_output_filename(const char* value, size_t size) {
  set_has_vcf_output_filename();
  vcf_output_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Partition.vcf_output_filename)
}
inline ::std::string* Partition::mutable_vcf_output_filename() {
  set_has_vcf_output_filename();
  // @@protoc_insertion_point(field_mutable:Partition.vcf_output_filename)
  return vcf_output_filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Partition::release_vcf_output_filename() {
  // @@protoc_insertion_point(field_release:Partition.vcf_output_filename)
  clear_has_vcf_output_filename();
  return vcf_output_filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Partition::set_allocated_vcf_output_filename(::std::string* vcf_output_filename) {
  if (vcf_output_filename != NULL) {
    set_has_vcf_output_filename();
  } else {
    clear_has_vcf_output_filename();
  }
  vcf_output_filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vcf_output_filename);
  // @@protoc_insertion_point(field_set_allocated:Partition.vcf_output_filename)
}

// optional int64 end = 5 [default = 9223372036854775807];
inline bool Partition::has_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Partition::set_has_end() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Partition::clear_has_end() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Partition::clear_end() {
  end_ = GOOGLE_LONGLONG(9223372036854775807);
  clear_has_end();
}
inline ::google::protobuf::int64 Partition::end() const {
  // @@protoc_insertion_point(field_get:Partition.end)
  return end_;
}
inline void Partition::set_end(::google::protobuf::int64 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:Partition.end)
}

// -------------------------------------------------------------------

// GATK4Integration

// optional string output_vidmap_json_file = 1;
inline bool GATK4Integration::has_output_vidmap_json_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GATK4Integration::set_has_output_vidmap_json_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GATK4Integration::clear_has_output_vidmap_json_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GATK4Integration::clear_output_vidmap_json_file() {
  output_vidmap_json_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_vidmap_json_file();
}
inline const ::std::string& GATK4Integration::output_vidmap_json_file() const {
  // @@protoc_insertion_point(field_get:GATK4Integration.output_vidmap_json_file)
  return output_vidmap_json_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GATK4Integration::set_output_vidmap_json_file(const ::std::string& value) {
  set_has_output_vidmap_json_file();
  output_vidmap_json_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GATK4Integration.output_vidmap_json_file)
}
inline void GATK4Integration::set_output_vidmap_json_file(const char* value) {
  set_has_output_vidmap_json_file();
  output_vidmap_json_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GATK4Integration.output_vidmap_json_file)
}
inline void GATK4Integration::set_output_vidmap_json_file(const char* value, size_t size) {
  set_has_output_vidmap_json_file();
  output_vidmap_json_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GATK4Integration.output_vidmap_json_file)
}
inline ::std::string* GATK4Integration::mutable_output_vidmap_json_file() {
  set_has_output_vidmap_json_file();
  // @@protoc_insertion_point(field_mutable:GATK4Integration.output_vidmap_json_file)
  return output_vidmap_json_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GATK4Integration::release_output_vidmap_json_file() {
  // @@protoc_insertion_point(field_release:GATK4Integration.output_vidmap_json_file)
  clear_has_output_vidmap_json_file();
  return output_vidmap_json_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GATK4Integration::set_allocated_output_vidmap_json_file(::std::string* output_vidmap_json_file) {
  if (output_vidmap_json_file != NULL) {
    set_has_output_vidmap_json_file();
  } else {
    clear_has_output_vidmap_json_file();
  }
  output_vidmap_json_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_vidmap_json_file);
  // @@protoc_insertion_point(field_set_allocated:GATK4Integration.output_vidmap_json_file)
}

// optional string output_callsetmap_json_file = 2;
inline bool GATK4Integration::has_output_callsetmap_json_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GATK4Integration::set_has_output_callsetmap_json_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GATK4Integration::clear_has_output_callsetmap_json_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GATK4Integration::clear_output_callsetmap_json_file() {
  output_callsetmap_json_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_callsetmap_json_file();
}
inline const ::std::string& GATK4Integration::output_callsetmap_json_file() const {
  // @@protoc_insertion_point(field_get:GATK4Integration.output_callsetmap_json_file)
  return output_callsetmap_json_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GATK4Integration::set_output_callsetmap_json_file(const ::std::string& value) {
  set_has_output_callsetmap_json_file();
  output_callsetmap_json_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GATK4Integration.output_callsetmap_json_file)
}
inline void GATK4Integration::set_output_callsetmap_json_file(const char* value) {
  set_has_output_callsetmap_json_file();
  output_callsetmap_json_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GATK4Integration.output_callsetmap_json_file)
}
inline void GATK4Integration::set_output_callsetmap_json_file(const char* value, size_t size) {
  set_has_output_callsetmap_json_file();
  output_callsetmap_json_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GATK4Integration.output_callsetmap_json_file)
}
inline ::std::string* GATK4Integration::mutable_output_callsetmap_json_file() {
  set_has_output_callsetmap_json_file();
  // @@protoc_insertion_point(field_mutable:GATK4Integration.output_callsetmap_json_file)
  return output_callsetmap_json_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GATK4Integration::release_output_callsetmap_json_file() {
  // @@protoc_insertion_point(field_release:GATK4Integration.output_callsetmap_json_file)
  clear_has_output_callsetmap_json_file();
  return output_callsetmap_json_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GATK4Integration::set_allocated_output_callsetmap_json_file(::std::string* output_callsetmap_json_file) {
  if (output_callsetmap_json_file != NULL) {
    set_has_output_callsetmap_json_file();
  } else {
    clear_has_output_callsetmap_json_file();
  }
  output_callsetmap_json_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_callsetmap_json_file);
  // @@protoc_insertion_point(field_set_allocated:GATK4Integration.output_callsetmap_json_file)
}

// optional int32 batch_size = 3 [default = 0];
inline bool GATK4Integration::has_batch_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GATK4Integration::set_has_batch_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GATK4Integration::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GATK4Integration::clear_batch_size() {
  batch_size_ = 0;
  clear_has_batch_size();
}
inline ::google::protobuf::int32 GATK4Integration::batch_size() const {
  // @@protoc_insertion_point(field_get:GATK4Integration.batch_size)
  return batch_size_;
}
inline void GATK4Integration::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:GATK4Integration.batch_size)
}

// optional bool use_samples_in_order_provided = 4 [default = false];
inline bool GATK4Integration::has_use_samples_in_order_provided() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GATK4Integration::set_has_use_samples_in_order_provided() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GATK4Integration::clear_has_use_samples_in_order_provided() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GATK4Integration::clear_use_samples_in_order_provided() {
  use_samples_in_order_provided_ = false;
  clear_has_use_samples_in_order_provided();
}
inline bool GATK4Integration::use_samples_in_order_provided() const {
  // @@protoc_insertion_point(field_get:GATK4Integration.use_samples_in_order_provided)
  return use_samples_in_order_provided_;
}
inline void GATK4Integration::set_use_samples_in_order_provided(bool value) {
  set_has_use_samples_in_order_provided();
  use_samples_in_order_provided_ = value;
  // @@protoc_insertion_point(field_set:GATK4Integration.use_samples_in_order_provided)
}

// optional int64 lower_sample_index = 5 [default = 0];
inline bool GATK4Integration::has_lower_sample_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GATK4Integration::set_has_lower_sample_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GATK4Integration::clear_has_lower_sample_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GATK4Integration::clear_lower_sample_index() {
  lower_sample_index_ = GOOGLE_LONGLONG(0);
  clear_has_lower_sample_index();
}
inline ::google::protobuf::int64 GATK4Integration::lower_sample_index() const {
  // @@protoc_insertion_point(field_get:GATK4Integration.lower_sample_index)
  return lower_sample_index_;
}
inline void GATK4Integration::set_lower_sample_index(::google::protobuf::int64 value) {
  set_has_lower_sample_index();
  lower_sample_index_ = value;
  // @@protoc_insertion_point(field_set:GATK4Integration.lower_sample_index)
}

// optional int64 upper_sample_index = 6 [default = 9223372036854775807];
inline bool GATK4Integration::has_upper_sample_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GATK4Integration::set_has_upper_sample_index() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GATK4Integration::clear_has_upper_sample_index() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GATK4Integration::clear_upper_sample_index() {
  upper_sample_index_ = GOOGLE_LONGLONG(9223372036854775807);
  clear_has_upper_sample_index();
}
inline ::google::protobuf::int64 GATK4Integration::upper_sample_index() const {
  // @@protoc_insertion_point(field_get:GATK4Integration.upper_sample_index)
  return upper_sample_index_;
}
inline void GATK4Integration::set_upper_sample_index(::google::protobuf::int64 value) {
  set_has_upper_sample_index();
  upper_sample_index_ = value;
  // @@protoc_insertion_point(field_set:GATK4Integration.upper_sample_index)
}

// -------------------------------------------------------------------

// ImportConfiguration

// required int64 size_per_column_partition = 7 [default = 16384];
inline bool ImportConfiguration::has_size_per_column_partition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImportConfiguration::set_has_size_per_column_partition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImportConfiguration::clear_has_size_per_column_partition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImportConfiguration::clear_size_per_column_partition() {
  size_per_column_partition_ = GOOGLE_LONGLONG(16384);
  clear_has_size_per_column_partition();
}
inline ::google::protobuf::int64 ImportConfiguration::size_per_column_partition() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.size_per_column_partition)
  return size_per_column_partition_;
}
inline void ImportConfiguration::set_size_per_column_partition(::google::protobuf::int64 value) {
  set_has_size_per_column_partition();
  size_per_column_partition_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.size_per_column_partition)
}

// optional bool row_based_partitioning = 1 [default = false];
inline bool ImportConfiguration::has_row_based_partitioning() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImportConfiguration::set_has_row_based_partitioning() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImportConfiguration::clear_has_row_based_partitioning() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImportConfiguration::clear_row_based_partitioning() {
  row_based_partitioning_ = false;
  clear_has_row_based_partitioning();
}
inline bool ImportConfiguration::row_based_partitioning() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.row_based_partitioning)
  return row_based_partitioning_;
}
inline void ImportConfiguration::set_row_based_partitioning(bool value) {
  set_has_row_based_partitioning();
  row_based_partitioning_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.row_based_partitioning)
}

// optional bool produce_combined_vcf = 2 [default = false];
inline bool ImportConfiguration::has_produce_combined_vcf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImportConfiguration::set_has_produce_combined_vcf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImportConfiguration::clear_has_produce_combined_vcf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImportConfiguration::clear_produce_combined_vcf() {
  produce_combined_vcf_ = false;
  clear_has_produce_combined_vcf();
}
inline bool ImportConfiguration::produce_combined_vcf() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.produce_combined_vcf)
  return produce_combined_vcf_;
}
inline void ImportConfiguration::set_produce_combined_vcf(bool value) {
  set_has_produce_combined_vcf();
  produce_combined_vcf_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.produce_combined_vcf)
}

// optional bool produce_tiledb_array = 3 [default = true];
inline bool ImportConfiguration::has_produce_tiledb_array() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ImportConfiguration::set_has_produce_tiledb_array() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ImportConfiguration::clear_has_produce_tiledb_array() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ImportConfiguration::clear_produce_tiledb_array() {
  produce_tiledb_array_ = true;
  clear_has_produce_tiledb_array();
}
inline bool ImportConfiguration::produce_tiledb_array() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.produce_tiledb_array)
  return produce_tiledb_array_;
}
inline void ImportConfiguration::set_produce_tiledb_array(bool value) {
  set_has_produce_tiledb_array();
  produce_tiledb_array_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.produce_tiledb_array)
}

// repeated .Partition column_partitions = 4;
inline int ImportConfiguration::column_partitions_size() const {
  return column_partitions_.size();
}
inline void ImportConfiguration::clear_column_partitions() {
  column_partitions_.Clear();
}
inline const ::Partition& ImportConfiguration::column_partitions(int index) const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.column_partitions)
  return column_partitions_.Get(index);
}
inline ::Partition* ImportConfiguration::mutable_column_partitions(int index) {
  // @@protoc_insertion_point(field_mutable:ImportConfiguration.column_partitions)
  return column_partitions_.Mutable(index);
}
inline ::Partition* ImportConfiguration::add_column_partitions() {
  // @@protoc_insertion_point(field_add:ImportConfiguration.column_partitions)
  return column_partitions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Partition >*
ImportConfiguration::mutable_column_partitions() {
  // @@protoc_insertion_point(field_mutable_list:ImportConfiguration.column_partitions)
  return &column_partitions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Partition >&
ImportConfiguration::column_partitions() const {
  // @@protoc_insertion_point(field_list:ImportConfiguration.column_partitions)
  return column_partitions_;
}

// optional string vid_mapping_file = 5;
inline bool ImportConfiguration::has_vid_mapping_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ImportConfiguration::set_has_vid_mapping_file() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ImportConfiguration::clear_has_vid_mapping_file() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ImportConfiguration::clear_vid_mapping_file() {
  vid_mapping_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vid_mapping_file();
}
inline const ::std::string& ImportConfiguration::vid_mapping_file() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.vid_mapping_file)
  return vid_mapping_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportConfiguration::set_vid_mapping_file(const ::std::string& value) {
  set_has_vid_mapping_file();
  vid_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImportConfiguration.vid_mapping_file)
}
inline void ImportConfiguration::set_vid_mapping_file(const char* value) {
  set_has_vid_mapping_file();
  vid_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImportConfiguration.vid_mapping_file)
}
inline void ImportConfiguration::set_vid_mapping_file(const char* value, size_t size) {
  set_has_vid_mapping_file();
  vid_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImportConfiguration.vid_mapping_file)
}
inline ::std::string* ImportConfiguration::mutable_vid_mapping_file() {
  set_has_vid_mapping_file();
  // @@protoc_insertion_point(field_mutable:ImportConfiguration.vid_mapping_file)
  return vid_mapping_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImportConfiguration::release_vid_mapping_file() {
  // @@protoc_insertion_point(field_release:ImportConfiguration.vid_mapping_file)
  clear_has_vid_mapping_file();
  return vid_mapping_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportConfiguration::set_allocated_vid_mapping_file(::std::string* vid_mapping_file) {
  if (vid_mapping_file != NULL) {
    set_has_vid_mapping_file();
  } else {
    clear_has_vid_mapping_file();
  }
  vid_mapping_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vid_mapping_file);
  // @@protoc_insertion_point(field_set_allocated:ImportConfiguration.vid_mapping_file)
}

// optional string callset_mapping_file = 6;
inline bool ImportConfiguration::has_callset_mapping_file() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ImportConfiguration::set_has_callset_mapping_file() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ImportConfiguration::clear_has_callset_mapping_file() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ImportConfiguration::clear_callset_mapping_file() {
  callset_mapping_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_callset_mapping_file();
}
inline const ::std::string& ImportConfiguration::callset_mapping_file() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.callset_mapping_file)
  return callset_mapping_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportConfiguration::set_callset_mapping_file(const ::std::string& value) {
  set_has_callset_mapping_file();
  callset_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImportConfiguration.callset_mapping_file)
}
inline void ImportConfiguration::set_callset_mapping_file(const char* value) {
  set_has_callset_mapping_file();
  callset_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImportConfiguration.callset_mapping_file)
}
inline void ImportConfiguration::set_callset_mapping_file(const char* value, size_t size) {
  set_has_callset_mapping_file();
  callset_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImportConfiguration.callset_mapping_file)
}
inline ::std::string* ImportConfiguration::mutable_callset_mapping_file() {
  set_has_callset_mapping_file();
  // @@protoc_insertion_point(field_mutable:ImportConfiguration.callset_mapping_file)
  return callset_mapping_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImportConfiguration::release_callset_mapping_file() {
  // @@protoc_insertion_point(field_release:ImportConfiguration.callset_mapping_file)
  clear_has_callset_mapping_file();
  return callset_mapping_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportConfiguration::set_allocated_callset_mapping_file(::std::string* callset_mapping_file) {
  if (callset_mapping_file != NULL) {
    set_has_callset_mapping_file();
  } else {
    clear_has_callset_mapping_file();
  }
  callset_mapping_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callset_mapping_file);
  // @@protoc_insertion_point(field_set_allocated:ImportConfiguration.callset_mapping_file)
}

// optional bool treat_deletions_as_intervals = 8 [default = true];
inline bool ImportConfiguration::has_treat_deletions_as_intervals() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ImportConfiguration::set_has_treat_deletions_as_intervals() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ImportConfiguration::clear_has_treat_deletions_as_intervals() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ImportConfiguration::clear_treat_deletions_as_intervals() {
  treat_deletions_as_intervals_ = true;
  clear_has_treat_deletions_as_intervals();
}
inline bool ImportConfiguration::treat_deletions_as_intervals() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.treat_deletions_as_intervals)
  return treat_deletions_as_intervals_;
}
inline void ImportConfiguration::set_treat_deletions_as_intervals(bool value) {
  set_has_treat_deletions_as_intervals();
  treat_deletions_as_intervals_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.treat_deletions_as_intervals)
}

// optional int32 num_parallel_vcf_files = 9 [default = 1];
inline bool ImportConfiguration::has_num_parallel_vcf_files() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ImportConfiguration::set_has_num_parallel_vcf_files() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ImportConfiguration::clear_has_num_parallel_vcf_files() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ImportConfiguration::clear_num_parallel_vcf_files() {
  num_parallel_vcf_files_ = 1;
  clear_has_num_parallel_vcf_files();
}
inline ::google::protobuf::int32 ImportConfiguration::num_parallel_vcf_files() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.num_parallel_vcf_files)
  return num_parallel_vcf_files_;
}
inline void ImportConfiguration::set_num_parallel_vcf_files(::google::protobuf::int32 value) {
  set_has_num_parallel_vcf_files();
  num_parallel_vcf_files_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.num_parallel_vcf_files)
}

// optional bool delete_and_create_tiledb_array = 10 [default = false];
inline bool ImportConfiguration::has_delete_and_create_tiledb_array() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ImportConfiguration::set_has_delete_and_create_tiledb_array() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ImportConfiguration::clear_has_delete_and_create_tiledb_array() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ImportConfiguration::clear_delete_and_create_tiledb_array() {
  delete_and_create_tiledb_array_ = false;
  clear_has_delete_and_create_tiledb_array();
}
inline bool ImportConfiguration::delete_and_create_tiledb_array() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.delete_and_create_tiledb_array)
  return delete_and_create_tiledb_array_;
}
inline void ImportConfiguration::set_delete_and_create_tiledb_array(bool value) {
  set_has_delete_and_create_tiledb_array();
  delete_and_create_tiledb_array_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.delete_and_create_tiledb_array)
}

// optional bool do_ping_pong_buffering = 11 [default = true];
inline bool ImportConfiguration::has_do_ping_pong_buffering() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ImportConfiguration::set_has_do_ping_pong_buffering() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ImportConfiguration::clear_has_do_ping_pong_buffering() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ImportConfiguration::clear_do_ping_pong_buffering() {
  do_ping_pong_buffering_ = true;
  clear_has_do_ping_pong_buffering();
}
inline bool ImportConfiguration::do_ping_pong_buffering() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.do_ping_pong_buffering)
  return do_ping_pong_buffering_;
}
inline void ImportConfiguration::set_do_ping_pong_buffering(bool value) {
  set_has_do_ping_pong_buffering();
  do_ping_pong_buffering_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.do_ping_pong_buffering)
}

// optional bool offload_vcf_output_processing = 12 [default = true];
inline bool ImportConfiguration::has_offload_vcf_output_processing() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ImportConfiguration::set_has_offload_vcf_output_processing() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ImportConfiguration::clear_has_offload_vcf_output_processing() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ImportConfiguration::clear_offload_vcf_output_processing() {
  offload_vcf_output_processing_ = true;
  clear_has_offload_vcf_output_processing();
}
inline bool ImportConfiguration::offload_vcf_output_processing() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.offload_vcf_output_processing)
  return offload_vcf_output_processing_;
}
inline void ImportConfiguration::set_offload_vcf_output_processing(bool value) {
  set_has_offload_vcf_output_processing();
  offload_vcf_output_processing_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.offload_vcf_output_processing)
}

// optional bool discard_vcf_index = 13 [default = true];
inline bool ImportConfiguration::has_discard_vcf_index() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ImportConfiguration::set_has_discard_vcf_index() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ImportConfiguration::clear_has_discard_vcf_index() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ImportConfiguration::clear_discard_vcf_index() {
  discard_vcf_index_ = true;
  clear_has_discard_vcf_index();
}
inline bool ImportConfiguration::discard_vcf_index() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.discard_vcf_index)
  return discard_vcf_index_;
}
inline void ImportConfiguration::set_discard_vcf_index(bool value) {
  set_has_discard_vcf_index();
  discard_vcf_index_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.discard_vcf_index)
}

// optional int64 segment_size = 14 [default = 10485760];
inline bool ImportConfiguration::has_segment_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ImportConfiguration::set_has_segment_size() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ImportConfiguration::clear_has_segment_size() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ImportConfiguration::clear_segment_size() {
  segment_size_ = GOOGLE_LONGLONG(10485760);
  clear_has_segment_size();
}
inline ::google::protobuf::int64 ImportConfiguration::segment_size() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.segment_size)
  return segment_size_;
}
inline void ImportConfiguration::set_segment_size(::google::protobuf::int64 value) {
  set_has_segment_size();
  segment_size_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.segment_size)
}

// optional bool compress_tiledb_array = 15 [default = true];
inline bool ImportConfiguration::has_compress_tiledb_array() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ImportConfiguration::set_has_compress_tiledb_array() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ImportConfiguration::clear_has_compress_tiledb_array() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ImportConfiguration::clear_compress_tiledb_array() {
  compress_tiledb_array_ = true;
  clear_has_compress_tiledb_array();
}
inline bool ImportConfiguration::compress_tiledb_array() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.compress_tiledb_array)
  return compress_tiledb_array_;
}
inline void ImportConfiguration::set_compress_tiledb_array(bool value) {
  set_has_compress_tiledb_array();
  compress_tiledb_array_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.compress_tiledb_array)
}

// optional int64 num_cells_per_tile = 16 [default = 1000];
inline bool ImportConfiguration::has_num_cells_per_tile() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ImportConfiguration::set_has_num_cells_per_tile() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ImportConfiguration::clear_has_num_cells_per_tile() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ImportConfiguration::clear_num_cells_per_tile() {
  num_cells_per_tile_ = GOOGLE_LONGLONG(1000);
  clear_has_num_cells_per_tile();
}
inline ::google::protobuf::int64 ImportConfiguration::num_cells_per_tile() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.num_cells_per_tile)
  return num_cells_per_tile_;
}
inline void ImportConfiguration::set_num_cells_per_tile(::google::protobuf::int64 value) {
  set_has_num_cells_per_tile();
  num_cells_per_tile_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.num_cells_per_tile)
}

// optional bool fail_if_updating = 17 [default = false];
inline bool ImportConfiguration::has_fail_if_updating() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ImportConfiguration::set_has_fail_if_updating() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ImportConfiguration::clear_has_fail_if_updating() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ImportConfiguration::clear_fail_if_updating() {
  fail_if_updating_ = false;
  clear_has_fail_if_updating();
}
inline bool ImportConfiguration::fail_if_updating() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.fail_if_updating)
  return fail_if_updating_;
}
inline void ImportConfiguration::set_fail_if_updating(bool value) {
  set_has_fail_if_updating();
  fail_if_updating_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.fail_if_updating)
}

// optional .GATK4Integration gatk4_integration_parameters = 18;
inline bool ImportConfiguration::has_gatk4_integration_parameters() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ImportConfiguration::set_has_gatk4_integration_parameters() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ImportConfiguration::clear_has_gatk4_integration_parameters() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ImportConfiguration::clear_gatk4_integration_parameters() {
  if (gatk4_integration_parameters_ != NULL) gatk4_integration_parameters_->::GATK4Integration::Clear();
  clear_has_gatk4_integration_parameters();
}
inline const ::GATK4Integration& ImportConfiguration::gatk4_integration_parameters() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.gatk4_integration_parameters)
  return gatk4_integration_parameters_ != NULL ? *gatk4_integration_parameters_ : *default_instance_->gatk4_integration_parameters_;
}
inline ::GATK4Integration* ImportConfiguration::mutable_gatk4_integration_parameters() {
  set_has_gatk4_integration_parameters();
  if (gatk4_integration_parameters_ == NULL) {
    gatk4_integration_parameters_ = new ::GATK4Integration;
  }
  // @@protoc_insertion_point(field_mutable:ImportConfiguration.gatk4_integration_parameters)
  return gatk4_integration_parameters_;
}
inline ::GATK4Integration* ImportConfiguration::release_gatk4_integration_parameters() {
  // @@protoc_insertion_point(field_release:ImportConfiguration.gatk4_integration_parameters)
  clear_has_gatk4_integration_parameters();
  ::GATK4Integration* temp = gatk4_integration_parameters_;
  gatk4_integration_parameters_ = NULL;
  return temp;
}
inline void ImportConfiguration::set_allocated_gatk4_integration_parameters(::GATK4Integration* gatk4_integration_parameters) {
  delete gatk4_integration_parameters_;
  gatk4_integration_parameters_ = gatk4_integration_parameters;
  if (gatk4_integration_parameters) {
    set_has_gatk4_integration_parameters();
  } else {
    clear_has_gatk4_integration_parameters();
  }
  // @@protoc_insertion_point(field_set_allocated:ImportConfiguration.gatk4_integration_parameters)
}

// optional int32 tiledb_compression_level = 19 [default = -1];
inline bool ImportConfiguration::has_tiledb_compression_level() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ImportConfiguration::set_has_tiledb_compression_level() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ImportConfiguration::clear_has_tiledb_compression_level() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ImportConfiguration::clear_tiledb_compression_level() {
  tiledb_compression_level_ = -1;
  clear_has_tiledb_compression_level();
}
inline ::google::protobuf::int32 ImportConfiguration::tiledb_compression_level() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.tiledb_compression_level)
  return tiledb_compression_level_;
}
inline void ImportConfiguration::set_tiledb_compression_level(::google::protobuf::int32 value) {
  set_has_tiledb_compression_level();
  tiledb_compression_level_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.tiledb_compression_level)
}

// optional bool consolidate_tiledb_array_after_load = 20 [default = false];
inline bool ImportConfiguration::has_consolidate_tiledb_array_after_load() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ImportConfiguration::set_has_consolidate_tiledb_array_after_load() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ImportConfiguration::clear_has_consolidate_tiledb_array_after_load() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ImportConfiguration::clear_consolidate_tiledb_array_after_load() {
  consolidate_tiledb_array_after_load_ = false;
  clear_has_consolidate_tiledb_array_after_load();
}
inline bool ImportConfiguration::consolidate_tiledb_array_after_load() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.consolidate_tiledb_array_after_load)
  return consolidate_tiledb_array_after_load_;
}
inline void ImportConfiguration::set_consolidate_tiledb_array_after_load(bool value) {
  set_has_consolidate_tiledb_array_after_load();
  consolidate_tiledb_array_after_load_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.consolidate_tiledb_array_after_load)
}

// optional bool disable_synced_writes = 21 [default = true];
inline bool ImportConfiguration::has_disable_synced_writes() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ImportConfiguration::set_has_disable_synced_writes() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ImportConfiguration::clear_has_disable_synced_writes() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ImportConfiguration::clear_disable_synced_writes() {
  disable_synced_writes_ = true;
  clear_has_disable_synced_writes();
}
inline bool ImportConfiguration::disable_synced_writes() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.disable_synced_writes)
  return disable_synced_writes_;
}
inline void ImportConfiguration::set_disable_synced_writes(bool value) {
  set_has_disable_synced_writes();
  disable_synced_writes_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.disable_synced_writes)
}

// optional bool ignore_cells_not_in_partition = 22;
inline bool ImportConfiguration::has_ignore_cells_not_in_partition() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ImportConfiguration::set_has_ignore_cells_not_in_partition() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ImportConfiguration::clear_has_ignore_cells_not_in_partition() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ImportConfiguration::clear_ignore_cells_not_in_partition() {
  ignore_cells_not_in_partition_ = false;
  clear_has_ignore_cells_not_in_partition();
}
inline bool ImportConfiguration::ignore_cells_not_in_partition() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.ignore_cells_not_in_partition)
  return ignore_cells_not_in_partition_;
}
inline void ImportConfiguration::set_ignore_cells_not_in_partition(bool value) {
  set_has_ignore_cells_not_in_partition();
  ignore_cells_not_in_partition_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.ignore_cells_not_in_partition)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_genomicsdb_5fimport_5fconfig_2eproto__INCLUDED
