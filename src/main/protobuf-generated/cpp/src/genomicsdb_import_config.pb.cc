// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: genomicsdb_import_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "genomicsdb_import_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Partition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Partition_reflection_ = NULL;
const ::google::protobuf::Descriptor* GATK4Integration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GATK4Integration_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImportConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImportConfiguration_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_genomicsdb_5fimport_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_genomicsdb_5fimport_5fconfig_2eproto() {
  protobuf_AddDesc_genomicsdb_5fimport_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "genomicsdb_import_config.proto");
  GOOGLE_CHECK(file != NULL);
  Partition_descriptor_ = file->message_type(0);
  static const int Partition_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, workspace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, vcf_output_filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, end_),
  };
  Partition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Partition_descriptor_,
      Partition::default_instance_,
      Partition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, _has_bits_[0]),
      -1,
      -1,
      sizeof(Partition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Partition, _internal_metadata_),
      -1);
  GATK4Integration_descriptor_ = file->message_type(1);
  static const int GATK4Integration_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GATK4Integration, output_vidmap_json_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GATK4Integration, output_callsetmap_json_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GATK4Integration, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GATK4Integration, use_samples_in_order_provided_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GATK4Integration, lower_sample_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GATK4Integration, upper_sample_index_),
  };
  GATK4Integration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GATK4Integration_descriptor_,
      GATK4Integration::default_instance_,
      GATK4Integration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GATK4Integration, _has_bits_[0]),
      -1,
      -1,
      sizeof(GATK4Integration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GATK4Integration, _internal_metadata_),
      -1);
  ImportConfiguration_descriptor_ = file->message_type(2);
  static const int ImportConfiguration_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, size_per_column_partition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, row_based_partitioning_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, produce_combined_vcf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, produce_tiledb_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, column_partitions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, vid_mapping_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, callset_mapping_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, treat_deletions_as_intervals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, num_parallel_vcf_files_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, delete_and_create_tiledb_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, do_ping_pong_buffering_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, offload_vcf_output_processing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, discard_vcf_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, segment_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, compress_tiledb_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, num_cells_per_tile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, fail_if_updating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, gatk4_integration_parameters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, tiledb_compression_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, consolidate_tiledb_array_after_load_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, disable_synced_writes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, ignore_cells_not_in_partition_),
  };
  ImportConfiguration_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImportConfiguration_descriptor_,
      ImportConfiguration::default_instance_,
      ImportConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImportConfiguration),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImportConfiguration, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_genomicsdb_5fimport_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Partition_descriptor_, &Partition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GATK4Integration_descriptor_, &GATK4Integration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImportConfiguration_descriptor_, &ImportConfiguration::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_genomicsdb_5fimport_5fconfig_2eproto() {
  delete Partition::default_instance_;
  delete Partition_reflection_;
  delete GATK4Integration::default_instance_;
  delete GATK4Integration_reflection_;
  delete ImportConfiguration::default_instance_;
  delete ImportConfiguration_reflection_;
}

void protobuf_AddDesc_genomicsdb_5fimport_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_genomicsdb_5fimport_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036genomicsdb_import_config.proto\"{\n\tPart"
    "ition\022\r\n\005begin\030\001 \002(\003\022\021\n\tworkspace\030\002 \001(\t\022"
    "\r\n\005array\030\003 \001(\t\022\033\n\023vcf_output_filename\030\004 "
    "\001(\t\022 \n\003end\030\005 \001(\003:\0239223372036854775807\"\355\001"
    "\n\020GATK4Integration\022\037\n\027output_vidmap_json"
    "_file\030\001 \001(\t\022#\n\033output_callsetmap_json_fi"
    "le\030\002 \001(\t\022\025\n\nbatch_size\030\003 \001(\005:\0010\022,\n\035use_s"
    "amples_in_order_provided\030\004 \001(\010:\005false\022\035\n"
    "\022lower_sample_index\030\005 \001(\003:\0010\022/\n\022upper_sa"
    "mple_index\030\006 \001(\003:\0239223372036854775807\"\347\006"
    "\n\023ImportConfiguration\022(\n\031size_per_column"
    "_partition\030\007 \002(\003:\00516384\022%\n\026row_based_par"
    "titioning\030\001 \001(\010:\005false\022#\n\024produce_combin"
    "ed_vcf\030\002 \001(\010:\005false\022\"\n\024produce_tiledb_ar"
    "ray\030\003 \001(\010:\004true\022%\n\021column_partitions\030\004 \003"
    "(\0132\n.Partition\022\030\n\020vid_mapping_file\030\005 \001(\t"
    "\022\034\n\024callset_mapping_file\030\006 \001(\t\022*\n\034treat_"
    "deletions_as_intervals\030\010 \001(\010:\004true\022!\n\026nu"
    "m_parallel_vcf_files\030\t \001(\005:\0011\022-\n\036delete_"
    "and_create_tiledb_array\030\n \001(\010:\005false\022$\n\026"
    "do_ping_pong_buffering\030\013 \001(\010:\004true\022+\n\035of"
    "fload_vcf_output_processing\030\014 \001(\010:\004true\022"
    "\037\n\021discard_vcf_index\030\r \001(\010:\004true\022\036\n\014segm"
    "ent_size\030\016 \001(\003:\01010485760\022#\n\025compress_til"
    "edb_array\030\017 \001(\010:\004true\022 \n\022num_cells_per_t"
    "ile\030\020 \001(\003:\0041000\022\037\n\020fail_if_updating\030\021 \001("
    "\010:\005false\0227\n\034gatk4_integration_parameters"
    "\030\022 \001(\0132\021.GATK4Integration\022$\n\030tiledb_comp"
    "ression_level\030\023 \001(\005:\002-1\0222\n#consolidate_t"
    "iledb_array_after_load\030\024 \001(\010:\005false\022#\n\025d"
    "isable_synced_writes\030\025 \001(\010:\004true\022%\n\035igno"
    "re_cells_not_in_partition\030\026 \001(\010B5\n\024com.i"
    "ntel.genomicsdbB\035GenomicsDBImportConfigu"
    "ration", 1326);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "genomicsdb_import_config.proto", &protobuf_RegisterTypes);
  Partition::default_instance_ = new Partition();
  GATK4Integration::default_instance_ = new GATK4Integration();
  ImportConfiguration::default_instance_ = new ImportConfiguration();
  Partition::default_instance_->InitAsDefaultInstance();
  GATK4Integration::default_instance_->InitAsDefaultInstance();
  ImportConfiguration::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_genomicsdb_5fimport_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_genomicsdb_5fimport_5fconfig_2eproto {
  StaticDescriptorInitializer_genomicsdb_5fimport_5fconfig_2eproto() {
    protobuf_AddDesc_genomicsdb_5fimport_5fconfig_2eproto();
  }
} static_descriptor_initializer_genomicsdb_5fimport_5fconfig_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Partition::kBeginFieldNumber;
const int Partition::kWorkspaceFieldNumber;
const int Partition::kArrayFieldNumber;
const int Partition::kVcfOutputFilenameFieldNumber;
const int Partition::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Partition::Partition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Partition)
}

void Partition::InitAsDefaultInstance() {
}

Partition::Partition(const Partition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Partition)
}

void Partition::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  begin_ = GOOGLE_LONGLONG(0);
  workspace_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  array_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vcf_output_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_ = GOOGLE_LONGLONG(9223372036854775807);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Partition::~Partition() {
  // @@protoc_insertion_point(destructor:Partition)
  SharedDtor();
}

void Partition::SharedDtor() {
  workspace_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  array_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vcf_output_filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Partition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Partition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Partition_descriptor_;
}

const Partition& Partition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genomicsdb_5fimport_5fconfig_2eproto();
  return *default_instance_;
}

Partition* Partition::default_instance_ = NULL;

Partition* Partition::New(::google::protobuf::Arena* arena) const {
  Partition* n = new Partition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Partition::Clear() {
// @@protoc_insertion_point(message_clear_start:Partition)
  if (_has_bits_[0 / 32] & 31u) {
    begin_ = GOOGLE_LONGLONG(0);
    if (has_workspace()) {
      workspace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_array()) {
      array_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_vcf_output_filename()) {
      vcf_output_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    end_ = GOOGLE_LONGLONG(9223372036854775807);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Partition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Partition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 begin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_workspace;
        break;
      }

      // optional string workspace = 2;
      case 2: {
        if (tag == 18) {
         parse_workspace:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_workspace()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->workspace().data(), this->workspace().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Partition.workspace");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_array;
        break;
      }

      // optional string array = 3;
      case 3: {
        if (tag == 26) {
         parse_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_array()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->array().data(), this->array().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Partition.array");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vcf_output_filename;
        break;
      }

      // optional string vcf_output_filename = 4;
      case 4: {
        if (tag == 34) {
         parse_vcf_output_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vcf_output_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vcf_output_filename().data(), this->vcf_output_filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Partition.vcf_output_filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_end;
        break;
      }

      // optional int64 end = 5 [default = 9223372036854775807];
      case 5: {
        if (tag == 40) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Partition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Partition)
  return false;
#undef DO_
}

void Partition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Partition)
  // required int64 begin = 1;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->begin(), output);
  }

  // optional string workspace = 2;
  if (has_workspace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->workspace().data(), this->workspace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Partition.workspace");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->workspace(), output);
  }

  // optional string array = 3;
  if (has_array()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->array().data(), this->array().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Partition.array");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->array(), output);
  }

  // optional string vcf_output_filename = 4;
  if (has_vcf_output_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vcf_output_filename().data(), this->vcf_output_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Partition.vcf_output_filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->vcf_output_filename(), output);
  }

  // optional int64 end = 5 [default = 9223372036854775807];
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->end(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Partition)
}

::google::protobuf::uint8* Partition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Partition)
  // required int64 begin = 1;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->begin(), target);
  }

  // optional string workspace = 2;
  if (has_workspace()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->workspace().data(), this->workspace().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Partition.workspace");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->workspace(), target);
  }

  // optional string array = 3;
  if (has_array()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->array().data(), this->array().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Partition.array");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->array(), target);
  }

  // optional string vcf_output_filename = 4;
  if (has_vcf_output_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vcf_output_filename().data(), this->vcf_output_filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Partition.vcf_output_filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->vcf_output_filename(), target);
  }

  // optional int64 end = 5 [default = 9223372036854775807];
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->end(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Partition)
  return target;
}

int Partition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Partition)
  int total_size = 0;

  // required int64 begin = 1;
  if (has_begin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->begin());
  }
  if (_has_bits_[1 / 32] & 30u) {
    // optional string workspace = 2;
    if (has_workspace()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->workspace());
    }

    // optional string array = 3;
    if (has_array()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->array());
    }

    // optional string vcf_output_filename = 4;
    if (has_vcf_output_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vcf_output_filename());
    }

    // optional int64 end = 5 [default = 9223372036854775807];
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Partition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Partition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Partition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Partition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Partition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Partition)
    MergeFrom(*source);
  }
}

void Partition::MergeFrom(const Partition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Partition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_workspace()) {
      set_has_workspace();
      workspace_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.workspace_);
    }
    if (from.has_array()) {
      set_has_array();
      array_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.array_);
    }
    if (from.has_vcf_output_filename()) {
      set_has_vcf_output_filename();
      vcf_output_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vcf_output_filename_);
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Partition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Partition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Partition::CopyFrom(const Partition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Partition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Partition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Partition::Swap(Partition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Partition::InternalSwap(Partition* other) {
  std::swap(begin_, other->begin_);
  workspace_.Swap(&other->workspace_);
  array_.Swap(&other->array_);
  vcf_output_filename_.Swap(&other->vcf_output_filename_);
  std::swap(end_, other->end_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Partition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Partition_descriptor_;
  metadata.reflection = Partition_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Partition

// required int64 begin = 1;
bool Partition::has_begin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Partition::set_has_begin() {
  _has_bits_[0] |= 0x00000001u;
}
void Partition::clear_has_begin() {
  _has_bits_[0] &= ~0x00000001u;
}
void Partition::clear_begin() {
  begin_ = GOOGLE_LONGLONG(0);
  clear_has_begin();
}
 ::google::protobuf::int64 Partition::begin() const {
  // @@protoc_insertion_point(field_get:Partition.begin)
  return begin_;
}
 void Partition::set_begin(::google::protobuf::int64 value) {
  set_has_begin();
  begin_ = value;
  // @@protoc_insertion_point(field_set:Partition.begin)
}

// optional string workspace = 2;
bool Partition::has_workspace() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Partition::set_has_workspace() {
  _has_bits_[0] |= 0x00000002u;
}
void Partition::clear_has_workspace() {
  _has_bits_[0] &= ~0x00000002u;
}
void Partition::clear_workspace() {
  workspace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_workspace();
}
 const ::std::string& Partition::workspace() const {
  // @@protoc_insertion_point(field_get:Partition.workspace)
  return workspace_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Partition::set_workspace(const ::std::string& value) {
  set_has_workspace();
  workspace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Partition.workspace)
}
 void Partition::set_workspace(const char* value) {
  set_has_workspace();
  workspace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Partition.workspace)
}
 void Partition::set_workspace(const char* value, size_t size) {
  set_has_workspace();
  workspace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Partition.workspace)
}
 ::std::string* Partition::mutable_workspace() {
  set_has_workspace();
  // @@protoc_insertion_point(field_mutable:Partition.workspace)
  return workspace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Partition::release_workspace() {
  // @@protoc_insertion_point(field_release:Partition.workspace)
  clear_has_workspace();
  return workspace_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Partition::set_allocated_workspace(::std::string* workspace) {
  if (workspace != NULL) {
    set_has_workspace();
  } else {
    clear_has_workspace();
  }
  workspace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workspace);
  // @@protoc_insertion_point(field_set_allocated:Partition.workspace)
}

// optional string array = 3;
bool Partition::has_array() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Partition::set_has_array() {
  _has_bits_[0] |= 0x00000004u;
}
void Partition::clear_has_array() {
  _has_bits_[0] &= ~0x00000004u;
}
void Partition::clear_array() {
  array_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_array();
}
 const ::std::string& Partition::array() const {
  // @@protoc_insertion_point(field_get:Partition.array)
  return array_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Partition::set_array(const ::std::string& value) {
  set_has_array();
  array_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Partition.array)
}
 void Partition::set_array(const char* value) {
  set_has_array();
  array_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Partition.array)
}
 void Partition::set_array(const char* value, size_t size) {
  set_has_array();
  array_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Partition.array)
}
 ::std::string* Partition::mutable_array() {
  set_has_array();
  // @@protoc_insertion_point(field_mutable:Partition.array)
  return array_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Partition::release_array() {
  // @@protoc_insertion_point(field_release:Partition.array)
  clear_has_array();
  return array_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Partition::set_allocated_array(::std::string* array) {
  if (array != NULL) {
    set_has_array();
  } else {
    clear_has_array();
  }
  array_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), array);
  // @@protoc_insertion_point(field_set_allocated:Partition.array)
}

// optional string vcf_output_filename = 4;
bool Partition::has_vcf_output_filename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Partition::set_has_vcf_output_filename() {
  _has_bits_[0] |= 0x00000008u;
}
void Partition::clear_has_vcf_output_filename() {
  _has_bits_[0] &= ~0x00000008u;
}
void Partition::clear_vcf_output_filename() {
  vcf_output_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vcf_output_filename();
}
 const ::std::string& Partition::vcf_output_filename() const {
  // @@protoc_insertion_point(field_get:Partition.vcf_output_filename)
  return vcf_output_filename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Partition::set_vcf_output_filename(const ::std::string& value) {
  set_has_vcf_output_filename();
  vcf_output_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Partition.vcf_output_filename)
}
 void Partition::set_vcf_output_filename(const char* value) {
  set_has_vcf_output_filename();
  vcf_output_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Partition.vcf_output_filename)
}
 void Partition::set_vcf_output_filename(const char* value, size_t size) {
  set_has_vcf_output_filename();
  vcf_output_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Partition.vcf_output_filename)
}
 ::std::string* Partition::mutable_vcf_output_filename() {
  set_has_vcf_output_filename();
  // @@protoc_insertion_point(field_mutable:Partition.vcf_output_filename)
  return vcf_output_filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Partition::release_vcf_output_filename() {
  // @@protoc_insertion_point(field_release:Partition.vcf_output_filename)
  clear_has_vcf_output_filename();
  return vcf_output_filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Partition::set_allocated_vcf_output_filename(::std::string* vcf_output_filename) {
  if (vcf_output_filename != NULL) {
    set_has_vcf_output_filename();
  } else {
    clear_has_vcf_output_filename();
  }
  vcf_output_filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vcf_output_filename);
  // @@protoc_insertion_point(field_set_allocated:Partition.vcf_output_filename)
}

// optional int64 end = 5 [default = 9223372036854775807];
bool Partition::has_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Partition::set_has_end() {
  _has_bits_[0] |= 0x00000010u;
}
void Partition::clear_has_end() {
  _has_bits_[0] &= ~0x00000010u;
}
void Partition::clear_end() {
  end_ = GOOGLE_LONGLONG(9223372036854775807);
  clear_has_end();
}
 ::google::protobuf::int64 Partition::end() const {
  // @@protoc_insertion_point(field_get:Partition.end)
  return end_;
}
 void Partition::set_end(::google::protobuf::int64 value) {
  set_has_end();
  end_ = value;
  // @@protoc_insertion_point(field_set:Partition.end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GATK4Integration::kOutputVidmapJsonFileFieldNumber;
const int GATK4Integration::kOutputCallsetmapJsonFileFieldNumber;
const int GATK4Integration::kBatchSizeFieldNumber;
const int GATK4Integration::kUseSamplesInOrderProvidedFieldNumber;
const int GATK4Integration::kLowerSampleIndexFieldNumber;
const int GATK4Integration::kUpperSampleIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GATK4Integration::GATK4Integration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GATK4Integration)
}

void GATK4Integration::InitAsDefaultInstance() {
}

GATK4Integration::GATK4Integration(const GATK4Integration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GATK4Integration)
}

void GATK4Integration::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  output_vidmap_json_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_callsetmap_json_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  batch_size_ = 0;
  use_samples_in_order_provided_ = false;
  lower_sample_index_ = GOOGLE_LONGLONG(0);
  upper_sample_index_ = GOOGLE_LONGLONG(9223372036854775807);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GATK4Integration::~GATK4Integration() {
  // @@protoc_insertion_point(destructor:GATK4Integration)
  SharedDtor();
}

void GATK4Integration::SharedDtor() {
  output_vidmap_json_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_callsetmap_json_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void GATK4Integration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GATK4Integration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GATK4Integration_descriptor_;
}

const GATK4Integration& GATK4Integration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genomicsdb_5fimport_5fconfig_2eproto();
  return *default_instance_;
}

GATK4Integration* GATK4Integration::default_instance_ = NULL;

GATK4Integration* GATK4Integration::New(::google::protobuf::Arena* arena) const {
  GATK4Integration* n = new GATK4Integration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GATK4Integration::Clear() {
// @@protoc_insertion_point(message_clear_start:GATK4Integration)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GATK4Integration, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GATK4Integration*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(batch_size_, lower_sample_index_);
    if (has_output_vidmap_json_file()) {
      output_vidmap_json_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_output_callsetmap_json_file()) {
      output_callsetmap_json_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    upper_sample_index_ = GOOGLE_LONGLONG(9223372036854775807);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GATK4Integration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GATK4Integration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string output_vidmap_json_file = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_vidmap_json_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_vidmap_json_file().data(), this->output_vidmap_json_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GATK4Integration.output_vidmap_json_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_output_callsetmap_json_file;
        break;
      }

      // optional string output_callsetmap_json_file = 2;
      case 2: {
        if (tag == 18) {
         parse_output_callsetmap_json_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_callsetmap_json_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_callsetmap_json_file().data(), this->output_callsetmap_json_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GATK4Integration.output_callsetmap_json_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_batch_size;
        break;
      }

      // optional int32 batch_size = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_use_samples_in_order_provided;
        break;
      }

      // optional bool use_samples_in_order_provided = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_use_samples_in_order_provided:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_samples_in_order_provided_)));
          set_has_use_samples_in_order_provided();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lower_sample_index;
        break;
      }

      // optional int64 lower_sample_index = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_lower_sample_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lower_sample_index_)));
          set_has_lower_sample_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_upper_sample_index;
        break;
      }

      // optional int64 upper_sample_index = 6 [default = 9223372036854775807];
      case 6: {
        if (tag == 48) {
         parse_upper_sample_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &upper_sample_index_)));
          set_has_upper_sample_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GATK4Integration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GATK4Integration)
  return false;
#undef DO_
}

void GATK4Integration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GATK4Integration)
  // optional string output_vidmap_json_file = 1;
  if (has_output_vidmap_json_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_vidmap_json_file().data(), this->output_vidmap_json_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GATK4Integration.output_vidmap_json_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->output_vidmap_json_file(), output);
  }

  // optional string output_callsetmap_json_file = 2;
  if (has_output_callsetmap_json_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_callsetmap_json_file().data(), this->output_callsetmap_json_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GATK4Integration.output_callsetmap_json_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->output_callsetmap_json_file(), output);
  }

  // optional int32 batch_size = 3 [default = 0];
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->batch_size(), output);
  }

  // optional bool use_samples_in_order_provided = 4 [default = false];
  if (has_use_samples_in_order_provided()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_samples_in_order_provided(), output);
  }

  // optional int64 lower_sample_index = 5 [default = 0];
  if (has_lower_sample_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->lower_sample_index(), output);
  }

  // optional int64 upper_sample_index = 6 [default = 9223372036854775807];
  if (has_upper_sample_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->upper_sample_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GATK4Integration)
}

::google::protobuf::uint8* GATK4Integration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GATK4Integration)
  // optional string output_vidmap_json_file = 1;
  if (has_output_vidmap_json_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_vidmap_json_file().data(), this->output_vidmap_json_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GATK4Integration.output_vidmap_json_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->output_vidmap_json_file(), target);
  }

  // optional string output_callsetmap_json_file = 2;
  if (has_output_callsetmap_json_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_callsetmap_json_file().data(), this->output_callsetmap_json_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GATK4Integration.output_callsetmap_json_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->output_callsetmap_json_file(), target);
  }

  // optional int32 batch_size = 3 [default = 0];
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->batch_size(), target);
  }

  // optional bool use_samples_in_order_provided = 4 [default = false];
  if (has_use_samples_in_order_provided()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_samples_in_order_provided(), target);
  }

  // optional int64 lower_sample_index = 5 [default = 0];
  if (has_lower_sample_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->lower_sample_index(), target);
  }

  // optional int64 upper_sample_index = 6 [default = 9223372036854775807];
  if (has_upper_sample_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->upper_sample_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GATK4Integration)
  return target;
}

int GATK4Integration::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:GATK4Integration)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional string output_vidmap_json_file = 1;
    if (has_output_vidmap_json_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_vidmap_json_file());
    }

    // optional string output_callsetmap_json_file = 2;
    if (has_output_callsetmap_json_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_callsetmap_json_file());
    }

    // optional int32 batch_size = 3 [default = 0];
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batch_size());
    }

    // optional bool use_samples_in_order_provided = 4 [default = false];
    if (has_use_samples_in_order_provided()) {
      total_size += 1 + 1;
    }

    // optional int64 lower_sample_index = 5 [default = 0];
    if (has_lower_sample_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lower_sample_index());
    }

    // optional int64 upper_sample_index = 6 [default = 9223372036854775807];
    if (has_upper_sample_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->upper_sample_index());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GATK4Integration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GATK4Integration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GATK4Integration* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GATK4Integration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GATK4Integration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GATK4Integration)
    MergeFrom(*source);
  }
}

void GATK4Integration::MergeFrom(const GATK4Integration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GATK4Integration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_output_vidmap_json_file()) {
      set_has_output_vidmap_json_file();
      output_vidmap_json_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_vidmap_json_file_);
    }
    if (from.has_output_callsetmap_json_file()) {
      set_has_output_callsetmap_json_file();
      output_callsetmap_json_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_callsetmap_json_file_);
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_use_samples_in_order_provided()) {
      set_use_samples_in_order_provided(from.use_samples_in_order_provided());
    }
    if (from.has_lower_sample_index()) {
      set_lower_sample_index(from.lower_sample_index());
    }
    if (from.has_upper_sample_index()) {
      set_upper_sample_index(from.upper_sample_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GATK4Integration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GATK4Integration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GATK4Integration::CopyFrom(const GATK4Integration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GATK4Integration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GATK4Integration::IsInitialized() const {

  return true;
}

void GATK4Integration::Swap(GATK4Integration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GATK4Integration::InternalSwap(GATK4Integration* other) {
  output_vidmap_json_file_.Swap(&other->output_vidmap_json_file_);
  output_callsetmap_json_file_.Swap(&other->output_callsetmap_json_file_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(use_samples_in_order_provided_, other->use_samples_in_order_provided_);
  std::swap(lower_sample_index_, other->lower_sample_index_);
  std::swap(upper_sample_index_, other->upper_sample_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GATK4Integration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GATK4Integration_descriptor_;
  metadata.reflection = GATK4Integration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GATK4Integration

// optional string output_vidmap_json_file = 1;
bool GATK4Integration::has_output_vidmap_json_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GATK4Integration::set_has_output_vidmap_json_file() {
  _has_bits_[0] |= 0x00000001u;
}
void GATK4Integration::clear_has_output_vidmap_json_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void GATK4Integration::clear_output_vidmap_json_file() {
  output_vidmap_json_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_vidmap_json_file();
}
 const ::std::string& GATK4Integration::output_vidmap_json_file() const {
  // @@protoc_insertion_point(field_get:GATK4Integration.output_vidmap_json_file)
  return output_vidmap_json_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GATK4Integration::set_output_vidmap_json_file(const ::std::string& value) {
  set_has_output_vidmap_json_file();
  output_vidmap_json_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GATK4Integration.output_vidmap_json_file)
}
 void GATK4Integration::set_output_vidmap_json_file(const char* value) {
  set_has_output_vidmap_json_file();
  output_vidmap_json_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GATK4Integration.output_vidmap_json_file)
}
 void GATK4Integration::set_output_vidmap_json_file(const char* value, size_t size) {
  set_has_output_vidmap_json_file();
  output_vidmap_json_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GATK4Integration.output_vidmap_json_file)
}
 ::std::string* GATK4Integration::mutable_output_vidmap_json_file() {
  set_has_output_vidmap_json_file();
  // @@protoc_insertion_point(field_mutable:GATK4Integration.output_vidmap_json_file)
  return output_vidmap_json_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GATK4Integration::release_output_vidmap_json_file() {
  // @@protoc_insertion_point(field_release:GATK4Integration.output_vidmap_json_file)
  clear_has_output_vidmap_json_file();
  return output_vidmap_json_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GATK4Integration::set_allocated_output_vidmap_json_file(::std::string* output_vidmap_json_file) {
  if (output_vidmap_json_file != NULL) {
    set_has_output_vidmap_json_file();
  } else {
    clear_has_output_vidmap_json_file();
  }
  output_vidmap_json_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_vidmap_json_file);
  // @@protoc_insertion_point(field_set_allocated:GATK4Integration.output_vidmap_json_file)
}

// optional string output_callsetmap_json_file = 2;
bool GATK4Integration::has_output_callsetmap_json_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GATK4Integration::set_has_output_callsetmap_json_file() {
  _has_bits_[0] |= 0x00000002u;
}
void GATK4Integration::clear_has_output_callsetmap_json_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void GATK4Integration::clear_output_callsetmap_json_file() {
  output_callsetmap_json_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_callsetmap_json_file();
}
 const ::std::string& GATK4Integration::output_callsetmap_json_file() const {
  // @@protoc_insertion_point(field_get:GATK4Integration.output_callsetmap_json_file)
  return output_callsetmap_json_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GATK4Integration::set_output_callsetmap_json_file(const ::std::string& value) {
  set_has_output_callsetmap_json_file();
  output_callsetmap_json_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GATK4Integration.output_callsetmap_json_file)
}
 void GATK4Integration::set_output_callsetmap_json_file(const char* value) {
  set_has_output_callsetmap_json_file();
  output_callsetmap_json_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GATK4Integration.output_callsetmap_json_file)
}
 void GATK4Integration::set_output_callsetmap_json_file(const char* value, size_t size) {
  set_has_output_callsetmap_json_file();
  output_callsetmap_json_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GATK4Integration.output_callsetmap_json_file)
}
 ::std::string* GATK4Integration::mutable_output_callsetmap_json_file() {
  set_has_output_callsetmap_json_file();
  // @@protoc_insertion_point(field_mutable:GATK4Integration.output_callsetmap_json_file)
  return output_callsetmap_json_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* GATK4Integration::release_output_callsetmap_json_file() {
  // @@protoc_insertion_point(field_release:GATK4Integration.output_callsetmap_json_file)
  clear_has_output_callsetmap_json_file();
  return output_callsetmap_json_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void GATK4Integration::set_allocated_output_callsetmap_json_file(::std::string* output_callsetmap_json_file) {
  if (output_callsetmap_json_file != NULL) {
    set_has_output_callsetmap_json_file();
  } else {
    clear_has_output_callsetmap_json_file();
  }
  output_callsetmap_json_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_callsetmap_json_file);
  // @@protoc_insertion_point(field_set_allocated:GATK4Integration.output_callsetmap_json_file)
}

// optional int32 batch_size = 3 [default = 0];
bool GATK4Integration::has_batch_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GATK4Integration::set_has_batch_size() {
  _has_bits_[0] |= 0x00000004u;
}
void GATK4Integration::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void GATK4Integration::clear_batch_size() {
  batch_size_ = 0;
  clear_has_batch_size();
}
 ::google::protobuf::int32 GATK4Integration::batch_size() const {
  // @@protoc_insertion_point(field_get:GATK4Integration.batch_size)
  return batch_size_;
}
 void GATK4Integration::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:GATK4Integration.batch_size)
}

// optional bool use_samples_in_order_provided = 4 [default = false];
bool GATK4Integration::has_use_samples_in_order_provided() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GATK4Integration::set_has_use_samples_in_order_provided() {
  _has_bits_[0] |= 0x00000008u;
}
void GATK4Integration::clear_has_use_samples_in_order_provided() {
  _has_bits_[0] &= ~0x00000008u;
}
void GATK4Integration::clear_use_samples_in_order_provided() {
  use_samples_in_order_provided_ = false;
  clear_has_use_samples_in_order_provided();
}
 bool GATK4Integration::use_samples_in_order_provided() const {
  // @@protoc_insertion_point(field_get:GATK4Integration.use_samples_in_order_provided)
  return use_samples_in_order_provided_;
}
 void GATK4Integration::set_use_samples_in_order_provided(bool value) {
  set_has_use_samples_in_order_provided();
  use_samples_in_order_provided_ = value;
  // @@protoc_insertion_point(field_set:GATK4Integration.use_samples_in_order_provided)
}

// optional int64 lower_sample_index = 5 [default = 0];
bool GATK4Integration::has_lower_sample_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GATK4Integration::set_has_lower_sample_index() {
  _has_bits_[0] |= 0x00000010u;
}
void GATK4Integration::clear_has_lower_sample_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void GATK4Integration::clear_lower_sample_index() {
  lower_sample_index_ = GOOGLE_LONGLONG(0);
  clear_has_lower_sample_index();
}
 ::google::protobuf::int64 GATK4Integration::lower_sample_index() const {
  // @@protoc_insertion_point(field_get:GATK4Integration.lower_sample_index)
  return lower_sample_index_;
}
 void GATK4Integration::set_lower_sample_index(::google::protobuf::int64 value) {
  set_has_lower_sample_index();
  lower_sample_index_ = value;
  // @@protoc_insertion_point(field_set:GATK4Integration.lower_sample_index)
}

// optional int64 upper_sample_index = 6 [default = 9223372036854775807];
bool GATK4Integration::has_upper_sample_index() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void GATK4Integration::set_has_upper_sample_index() {
  _has_bits_[0] |= 0x00000020u;
}
void GATK4Integration::clear_has_upper_sample_index() {
  _has_bits_[0] &= ~0x00000020u;
}
void GATK4Integration::clear_upper_sample_index() {
  upper_sample_index_ = GOOGLE_LONGLONG(9223372036854775807);
  clear_has_upper_sample_index();
}
 ::google::protobuf::int64 GATK4Integration::upper_sample_index() const {
  // @@protoc_insertion_point(field_get:GATK4Integration.upper_sample_index)
  return upper_sample_index_;
}
 void GATK4Integration::set_upper_sample_index(::google::protobuf::int64 value) {
  set_has_upper_sample_index();
  upper_sample_index_ = value;
  // @@protoc_insertion_point(field_set:GATK4Integration.upper_sample_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImportConfiguration::kSizePerColumnPartitionFieldNumber;
const int ImportConfiguration::kRowBasedPartitioningFieldNumber;
const int ImportConfiguration::kProduceCombinedVcfFieldNumber;
const int ImportConfiguration::kProduceTiledbArrayFieldNumber;
const int ImportConfiguration::kColumnPartitionsFieldNumber;
const int ImportConfiguration::kVidMappingFileFieldNumber;
const int ImportConfiguration::kCallsetMappingFileFieldNumber;
const int ImportConfiguration::kTreatDeletionsAsIntervalsFieldNumber;
const int ImportConfiguration::kNumParallelVcfFilesFieldNumber;
const int ImportConfiguration::kDeleteAndCreateTiledbArrayFieldNumber;
const int ImportConfiguration::kDoPingPongBufferingFieldNumber;
const int ImportConfiguration::kOffloadVcfOutputProcessingFieldNumber;
const int ImportConfiguration::kDiscardVcfIndexFieldNumber;
const int ImportConfiguration::kSegmentSizeFieldNumber;
const int ImportConfiguration::kCompressTiledbArrayFieldNumber;
const int ImportConfiguration::kNumCellsPerTileFieldNumber;
const int ImportConfiguration::kFailIfUpdatingFieldNumber;
const int ImportConfiguration::kGatk4IntegrationParametersFieldNumber;
const int ImportConfiguration::kTiledbCompressionLevelFieldNumber;
const int ImportConfiguration::kConsolidateTiledbArrayAfterLoadFieldNumber;
const int ImportConfiguration::kDisableSyncedWritesFieldNumber;
const int ImportConfiguration::kIgnoreCellsNotInPartitionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImportConfiguration::ImportConfiguration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ImportConfiguration)
}

void ImportConfiguration::InitAsDefaultInstance() {
  gatk4_integration_parameters_ = const_cast< ::GATK4Integration*>(&::GATK4Integration::default_instance());
}

ImportConfiguration::ImportConfiguration(const ImportConfiguration& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ImportConfiguration)
}

void ImportConfiguration::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  size_per_column_partition_ = GOOGLE_LONGLONG(16384);
  row_based_partitioning_ = false;
  produce_combined_vcf_ = false;
  produce_tiledb_array_ = true;
  vid_mapping_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callset_mapping_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  treat_deletions_as_intervals_ = true;
  num_parallel_vcf_files_ = 1;
  delete_and_create_tiledb_array_ = false;
  do_ping_pong_buffering_ = true;
  offload_vcf_output_processing_ = true;
  discard_vcf_index_ = true;
  segment_size_ = GOOGLE_LONGLONG(10485760);
  compress_tiledb_array_ = true;
  num_cells_per_tile_ = GOOGLE_LONGLONG(1000);
  fail_if_updating_ = false;
  gatk4_integration_parameters_ = NULL;
  tiledb_compression_level_ = -1;
  consolidate_tiledb_array_after_load_ = false;
  disable_synced_writes_ = true;
  ignore_cells_not_in_partition_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImportConfiguration::~ImportConfiguration() {
  // @@protoc_insertion_point(destructor:ImportConfiguration)
  SharedDtor();
}

void ImportConfiguration::SharedDtor() {
  vid_mapping_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callset_mapping_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete gatk4_integration_parameters_;
  }
}

void ImportConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImportConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImportConfiguration_descriptor_;
}

const ImportConfiguration& ImportConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_genomicsdb_5fimport_5fconfig_2eproto();
  return *default_instance_;
}

ImportConfiguration* ImportConfiguration::default_instance_ = NULL;

ImportConfiguration* ImportConfiguration::New(::google::protobuf::Arena* arena) const {
  ImportConfiguration* n = new ImportConfiguration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImportConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:ImportConfiguration)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ImportConfiguration, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ImportConfiguration*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 239u) {
    ZR_(row_based_partitioning_, produce_combined_vcf_);
    size_per_column_partition_ = GOOGLE_LONGLONG(16384);
    produce_tiledb_array_ = true;
    if (has_vid_mapping_file()) {
      vid_mapping_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_callset_mapping_file()) {
      callset_mapping_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    treat_deletions_as_intervals_ = true;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    num_parallel_vcf_files_ = 1;
    delete_and_create_tiledb_array_ = false;
    do_ping_pong_buffering_ = true;
    offload_vcf_output_processing_ = true;
    discard_vcf_index_ = true;
    segment_size_ = GOOGLE_LONGLONG(10485760);
    compress_tiledb_array_ = true;
    num_cells_per_tile_ = GOOGLE_LONGLONG(1000);
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ZR_(fail_if_updating_, consolidate_tiledb_array_after_load_);
    if (has_gatk4_integration_parameters()) {
      if (gatk4_integration_parameters_ != NULL) gatk4_integration_parameters_->::GATK4Integration::Clear();
    }
    tiledb_compression_level_ = -1;
    disable_synced_writes_ = true;
    ignore_cells_not_in_partition_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  column_partitions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImportConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ImportConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool row_based_partitioning = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &row_based_partitioning_)));
          set_has_row_based_partitioning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_produce_combined_vcf;
        break;
      }

      // optional bool produce_combined_vcf = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_produce_combined_vcf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &produce_combined_vcf_)));
          set_has_produce_combined_vcf();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_produce_tiledb_array;
        break;
      }

      // optional bool produce_tiledb_array = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_produce_tiledb_array:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &produce_tiledb_array_)));
          set_has_produce_tiledb_array();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_column_partitions;
        break;
      }

      // repeated .Partition column_partitions = 4;
      case 4: {
        if (tag == 34) {
         parse_column_partitions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_column_partitions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_column_partitions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_column_partitions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_vid_mapping_file;
        break;
      }

      // optional string vid_mapping_file = 5;
      case 5: {
        if (tag == 42) {
         parse_vid_mapping_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vid_mapping_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vid_mapping_file().data(), this->vid_mapping_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ImportConfiguration.vid_mapping_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_callset_mapping_file;
        break;
      }

      // optional string callset_mapping_file = 6;
      case 6: {
        if (tag == 50) {
         parse_callset_mapping_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callset_mapping_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callset_mapping_file().data(), this->callset_mapping_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ImportConfiguration.callset_mapping_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_size_per_column_partition;
        break;
      }

      // required int64 size_per_column_partition = 7 [default = 16384];
      case 7: {
        if (tag == 56) {
         parse_size_per_column_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &size_per_column_partition_)));
          set_has_size_per_column_partition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_treat_deletions_as_intervals;
        break;
      }

      // optional bool treat_deletions_as_intervals = 8 [default = true];
      case 8: {
        if (tag == 64) {
         parse_treat_deletions_as_intervals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &treat_deletions_as_intervals_)));
          set_has_treat_deletions_as_intervals();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_num_parallel_vcf_files;
        break;
      }

      // optional int32 num_parallel_vcf_files = 9 [default = 1];
      case 9: {
        if (tag == 72) {
         parse_num_parallel_vcf_files:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_parallel_vcf_files_)));
          set_has_num_parallel_vcf_files();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_delete_and_create_tiledb_array;
        break;
      }

      // optional bool delete_and_create_tiledb_array = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_delete_and_create_tiledb_array:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &delete_and_create_tiledb_array_)));
          set_has_delete_and_create_tiledb_array();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_do_ping_pong_buffering;
        break;
      }

      // optional bool do_ping_pong_buffering = 11 [default = true];
      case 11: {
        if (tag == 88) {
         parse_do_ping_pong_buffering:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &do_ping_pong_buffering_)));
          set_has_do_ping_pong_buffering();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_offload_vcf_output_processing;
        break;
      }

      // optional bool offload_vcf_output_processing = 12 [default = true];
      case 12: {
        if (tag == 96) {
         parse_offload_vcf_output_processing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &offload_vcf_output_processing_)));
          set_has_offload_vcf_output_processing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_discard_vcf_index;
        break;
      }

      // optional bool discard_vcf_index = 13 [default = true];
      case 13: {
        if (tag == 104) {
         parse_discard_vcf_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &discard_vcf_index_)));
          set_has_discard_vcf_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_segment_size;
        break;
      }

      // optional int64 segment_size = 14 [default = 10485760];
      case 14: {
        if (tag == 112) {
         parse_segment_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &segment_size_)));
          set_has_segment_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_compress_tiledb_array;
        break;
      }

      // optional bool compress_tiledb_array = 15 [default = true];
      case 15: {
        if (tag == 120) {
         parse_compress_tiledb_array:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &compress_tiledb_array_)));
          set_has_compress_tiledb_array();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_num_cells_per_tile;
        break;
      }

      // optional int64 num_cells_per_tile = 16 [default = 1000];
      case 16: {
        if (tag == 128) {
         parse_num_cells_per_tile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_cells_per_tile_)));
          set_has_num_cells_per_tile();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_fail_if_updating;
        break;
      }

      // optional bool fail_if_updating = 17 [default = false];
      case 17: {
        if (tag == 136) {
         parse_fail_if_updating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fail_if_updating_)));
          set_has_fail_if_updating();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_gatk4_integration_parameters;
        break;
      }

      // optional .GATK4Integration gatk4_integration_parameters = 18;
      case 18: {
        if (tag == 146) {
         parse_gatk4_integration_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gatk4_integration_parameters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_tiledb_compression_level;
        break;
      }

      // optional int32 tiledb_compression_level = 19 [default = -1];
      case 19: {
        if (tag == 152) {
         parse_tiledb_compression_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tiledb_compression_level_)));
          set_has_tiledb_compression_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_consolidate_tiledb_array_after_load;
        break;
      }

      // optional bool consolidate_tiledb_array_after_load = 20 [default = false];
      case 20: {
        if (tag == 160) {
         parse_consolidate_tiledb_array_after_load:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &consolidate_tiledb_array_after_load_)));
          set_has_consolidate_tiledb_array_after_load();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_disable_synced_writes;
        break;
      }

      // optional bool disable_synced_writes = 21 [default = true];
      case 21: {
        if (tag == 168) {
         parse_disable_synced_writes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_synced_writes_)));
          set_has_disable_synced_writes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_ignore_cells_not_in_partition;
        break;
      }

      // optional bool ignore_cells_not_in_partition = 22;
      case 22: {
        if (tag == 176) {
         parse_ignore_cells_not_in_partition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_cells_not_in_partition_)));
          set_has_ignore_cells_not_in_partition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ImportConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ImportConfiguration)
  return false;
#undef DO_
}

void ImportConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ImportConfiguration)
  // optional bool row_based_partitioning = 1 [default = false];
  if (has_row_based_partitioning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->row_based_partitioning(), output);
  }

  // optional bool produce_combined_vcf = 2 [default = false];
  if (has_produce_combined_vcf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->produce_combined_vcf(), output);
  }

  // optional bool produce_tiledb_array = 3 [default = true];
  if (has_produce_tiledb_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->produce_tiledb_array(), output);
  }

  // repeated .Partition column_partitions = 4;
  for (unsigned int i = 0, n = this->column_partitions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->column_partitions(i), output);
  }

  // optional string vid_mapping_file = 5;
  if (has_vid_mapping_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vid_mapping_file().data(), this->vid_mapping_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ImportConfiguration.vid_mapping_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->vid_mapping_file(), output);
  }

  // optional string callset_mapping_file = 6;
  if (has_callset_mapping_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callset_mapping_file().data(), this->callset_mapping_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ImportConfiguration.callset_mapping_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->callset_mapping_file(), output);
  }

  // required int64 size_per_column_partition = 7 [default = 16384];
  if (has_size_per_column_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->size_per_column_partition(), output);
  }

  // optional bool treat_deletions_as_intervals = 8 [default = true];
  if (has_treat_deletions_as_intervals()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->treat_deletions_as_intervals(), output);
  }

  // optional int32 num_parallel_vcf_files = 9 [default = 1];
  if (has_num_parallel_vcf_files()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->num_parallel_vcf_files(), output);
  }

  // optional bool delete_and_create_tiledb_array = 10 [default = false];
  if (has_delete_and_create_tiledb_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->delete_and_create_tiledb_array(), output);
  }

  // optional bool do_ping_pong_buffering = 11 [default = true];
  if (has_do_ping_pong_buffering()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->do_ping_pong_buffering(), output);
  }

  // optional bool offload_vcf_output_processing = 12 [default = true];
  if (has_offload_vcf_output_processing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->offload_vcf_output_processing(), output);
  }

  // optional bool discard_vcf_index = 13 [default = true];
  if (has_discard_vcf_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->discard_vcf_index(), output);
  }

  // optional int64 segment_size = 14 [default = 10485760];
  if (has_segment_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->segment_size(), output);
  }

  // optional bool compress_tiledb_array = 15 [default = true];
  if (has_compress_tiledb_array()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->compress_tiledb_array(), output);
  }

  // optional int64 num_cells_per_tile = 16 [default = 1000];
  if (has_num_cells_per_tile()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->num_cells_per_tile(), output);
  }

  // optional bool fail_if_updating = 17 [default = false];
  if (has_fail_if_updating()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->fail_if_updating(), output);
  }

  // optional .GATK4Integration gatk4_integration_parameters = 18;
  if (has_gatk4_integration_parameters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->gatk4_integration_parameters_, output);
  }

  // optional int32 tiledb_compression_level = 19 [default = -1];
  if (has_tiledb_compression_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->tiledb_compression_level(), output);
  }

  // optional bool consolidate_tiledb_array_after_load = 20 [default = false];
  if (has_consolidate_tiledb_array_after_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->consolidate_tiledb_array_after_load(), output);
  }

  // optional bool disable_synced_writes = 21 [default = true];
  if (has_disable_synced_writes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->disable_synced_writes(), output);
  }

  // optional bool ignore_cells_not_in_partition = 22;
  if (has_ignore_cells_not_in_partition()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->ignore_cells_not_in_partition(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ImportConfiguration)
}

::google::protobuf::uint8* ImportConfiguration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImportConfiguration)
  // optional bool row_based_partitioning = 1 [default = false];
  if (has_row_based_partitioning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->row_based_partitioning(), target);
  }

  // optional bool produce_combined_vcf = 2 [default = false];
  if (has_produce_combined_vcf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->produce_combined_vcf(), target);
  }

  // optional bool produce_tiledb_array = 3 [default = true];
  if (has_produce_tiledb_array()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->produce_tiledb_array(), target);
  }

  // repeated .Partition column_partitions = 4;
  for (unsigned int i = 0, n = this->column_partitions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->column_partitions(i), false, target);
  }

  // optional string vid_mapping_file = 5;
  if (has_vid_mapping_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vid_mapping_file().data(), this->vid_mapping_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ImportConfiguration.vid_mapping_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->vid_mapping_file(), target);
  }

  // optional string callset_mapping_file = 6;
  if (has_callset_mapping_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callset_mapping_file().data(), this->callset_mapping_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ImportConfiguration.callset_mapping_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->callset_mapping_file(), target);
  }

  // required int64 size_per_column_partition = 7 [default = 16384];
  if (has_size_per_column_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->size_per_column_partition(), target);
  }

  // optional bool treat_deletions_as_intervals = 8 [default = true];
  if (has_treat_deletions_as_intervals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->treat_deletions_as_intervals(), target);
  }

  // optional int32 num_parallel_vcf_files = 9 [default = 1];
  if (has_num_parallel_vcf_files()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->num_parallel_vcf_files(), target);
  }

  // optional bool delete_and_create_tiledb_array = 10 [default = false];
  if (has_delete_and_create_tiledb_array()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->delete_and_create_tiledb_array(), target);
  }

  // optional bool do_ping_pong_buffering = 11 [default = true];
  if (has_do_ping_pong_buffering()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->do_ping_pong_buffering(), target);
  }

  // optional bool offload_vcf_output_processing = 12 [default = true];
  if (has_offload_vcf_output_processing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->offload_vcf_output_processing(), target);
  }

  // optional bool discard_vcf_index = 13 [default = true];
  if (has_discard_vcf_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->discard_vcf_index(), target);
  }

  // optional int64 segment_size = 14 [default = 10485760];
  if (has_segment_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->segment_size(), target);
  }

  // optional bool compress_tiledb_array = 15 [default = true];
  if (has_compress_tiledb_array()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->compress_tiledb_array(), target);
  }

  // optional int64 num_cells_per_tile = 16 [default = 1000];
  if (has_num_cells_per_tile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->num_cells_per_tile(), target);
  }

  // optional bool fail_if_updating = 17 [default = false];
  if (has_fail_if_updating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->fail_if_updating(), target);
  }

  // optional .GATK4Integration gatk4_integration_parameters = 18;
  if (has_gatk4_integration_parameters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->gatk4_integration_parameters_, false, target);
  }

  // optional int32 tiledb_compression_level = 19 [default = -1];
  if (has_tiledb_compression_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->tiledb_compression_level(), target);
  }

  // optional bool consolidate_tiledb_array_after_load = 20 [default = false];
  if (has_consolidate_tiledb_array_after_load()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->consolidate_tiledb_array_after_load(), target);
  }

  // optional bool disable_synced_writes = 21 [default = true];
  if (has_disable_synced_writes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->disable_synced_writes(), target);
  }

  // optional bool ignore_cells_not_in_partition = 22;
  if (has_ignore_cells_not_in_partition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->ignore_cells_not_in_partition(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImportConfiguration)
  return target;
}

int ImportConfiguration::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ImportConfiguration)
  int total_size = 0;

  // required int64 size_per_column_partition = 7 [default = 16384];
  if (has_size_per_column_partition()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->size_per_column_partition());
  }
  if (_has_bits_[1 / 32] & 238u) {
    // optional bool row_based_partitioning = 1 [default = false];
    if (has_row_based_partitioning()) {
      total_size += 1 + 1;
    }

    // optional bool produce_combined_vcf = 2 [default = false];
    if (has_produce_combined_vcf()) {
      total_size += 1 + 1;
    }

    // optional bool produce_tiledb_array = 3 [default = true];
    if (has_produce_tiledb_array()) {
      total_size += 1 + 1;
    }

    // optional string vid_mapping_file = 5;
    if (has_vid_mapping_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vid_mapping_file());
    }

    // optional string callset_mapping_file = 6;
    if (has_callset_mapping_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callset_mapping_file());
    }

    // optional bool treat_deletions_as_intervals = 8 [default = true];
    if (has_treat_deletions_as_intervals()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 num_parallel_vcf_files = 9 [default = 1];
    if (has_num_parallel_vcf_files()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_parallel_vcf_files());
    }

    // optional bool delete_and_create_tiledb_array = 10 [default = false];
    if (has_delete_and_create_tiledb_array()) {
      total_size += 1 + 1;
    }

    // optional bool do_ping_pong_buffering = 11 [default = true];
    if (has_do_ping_pong_buffering()) {
      total_size += 1 + 1;
    }

    // optional bool offload_vcf_output_processing = 12 [default = true];
    if (has_offload_vcf_output_processing()) {
      total_size += 1 + 1;
    }

    // optional bool discard_vcf_index = 13 [default = true];
    if (has_discard_vcf_index()) {
      total_size += 1 + 1;
    }

    // optional int64 segment_size = 14 [default = 10485760];
    if (has_segment_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->segment_size());
    }

    // optional bool compress_tiledb_array = 15 [default = true];
    if (has_compress_tiledb_array()) {
      total_size += 1 + 1;
    }

    // optional int64 num_cells_per_tile = 16 [default = 1000];
    if (has_num_cells_per_tile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_cells_per_tile());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional bool fail_if_updating = 17 [default = false];
    if (has_fail_if_updating()) {
      total_size += 2 + 1;
    }

    // optional .GATK4Integration gatk4_integration_parameters = 18;
    if (has_gatk4_integration_parameters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->gatk4_integration_parameters_);
    }

    // optional int32 tiledb_compression_level = 19 [default = -1];
    if (has_tiledb_compression_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tiledb_compression_level());
    }

    // optional bool consolidate_tiledb_array_after_load = 20 [default = false];
    if (has_consolidate_tiledb_array_after_load()) {
      total_size += 2 + 1;
    }

    // optional bool disable_synced_writes = 21 [default = true];
    if (has_disable_synced_writes()) {
      total_size += 2 + 1;
    }

    // optional bool ignore_cells_not_in_partition = 22;
    if (has_ignore_cells_not_in_partition()) {
      total_size += 2 + 1;
    }

  }
  // repeated .Partition column_partitions = 4;
  total_size += 1 * this->column_partitions_size();
  for (int i = 0; i < this->column_partitions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->column_partitions(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImportConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ImportConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImportConfiguration* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImportConfiguration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ImportConfiguration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ImportConfiguration)
    MergeFrom(*source);
  }
}

void ImportConfiguration::MergeFrom(const ImportConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ImportConfiguration)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  column_partitions_.MergeFrom(from.column_partitions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size_per_column_partition()) {
      set_size_per_column_partition(from.size_per_column_partition());
    }
    if (from.has_row_based_partitioning()) {
      set_row_based_partitioning(from.row_based_partitioning());
    }
    if (from.has_produce_combined_vcf()) {
      set_produce_combined_vcf(from.produce_combined_vcf());
    }
    if (from.has_produce_tiledb_array()) {
      set_produce_tiledb_array(from.produce_tiledb_array());
    }
    if (from.has_vid_mapping_file()) {
      set_has_vid_mapping_file();
      vid_mapping_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vid_mapping_file_);
    }
    if (from.has_callset_mapping_file()) {
      set_has_callset_mapping_file();
      callset_mapping_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.callset_mapping_file_);
    }
    if (from.has_treat_deletions_as_intervals()) {
      set_treat_deletions_as_intervals(from.treat_deletions_as_intervals());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_parallel_vcf_files()) {
      set_num_parallel_vcf_files(from.num_parallel_vcf_files());
    }
    if (from.has_delete_and_create_tiledb_array()) {
      set_delete_and_create_tiledb_array(from.delete_and_create_tiledb_array());
    }
    if (from.has_do_ping_pong_buffering()) {
      set_do_ping_pong_buffering(from.do_ping_pong_buffering());
    }
    if (from.has_offload_vcf_output_processing()) {
      set_offload_vcf_output_processing(from.offload_vcf_output_processing());
    }
    if (from.has_discard_vcf_index()) {
      set_discard_vcf_index(from.discard_vcf_index());
    }
    if (from.has_segment_size()) {
      set_segment_size(from.segment_size());
    }
    if (from.has_compress_tiledb_array()) {
      set_compress_tiledb_array(from.compress_tiledb_array());
    }
    if (from.has_num_cells_per_tile()) {
      set_num_cells_per_tile(from.num_cells_per_tile());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fail_if_updating()) {
      set_fail_if_updating(from.fail_if_updating());
    }
    if (from.has_gatk4_integration_parameters()) {
      mutable_gatk4_integration_parameters()->::GATK4Integration::MergeFrom(from.gatk4_integration_parameters());
    }
    if (from.has_tiledb_compression_level()) {
      set_tiledb_compression_level(from.tiledb_compression_level());
    }
    if (from.has_consolidate_tiledb_array_after_load()) {
      set_consolidate_tiledb_array_after_load(from.consolidate_tiledb_array_after_load());
    }
    if (from.has_disable_synced_writes()) {
      set_disable_synced_writes(from.disable_synced_writes());
    }
    if (from.has_ignore_cells_not_in_partition()) {
      set_ignore_cells_not_in_partition(from.ignore_cells_not_in_partition());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImportConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ImportConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImportConfiguration::CopyFrom(const ImportConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImportConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImportConfiguration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->column_partitions())) return false;
  return true;
}

void ImportConfiguration::Swap(ImportConfiguration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImportConfiguration::InternalSwap(ImportConfiguration* other) {
  std::swap(size_per_column_partition_, other->size_per_column_partition_);
  std::swap(row_based_partitioning_, other->row_based_partitioning_);
  std::swap(produce_combined_vcf_, other->produce_combined_vcf_);
  std::swap(produce_tiledb_array_, other->produce_tiledb_array_);
  column_partitions_.UnsafeArenaSwap(&other->column_partitions_);
  vid_mapping_file_.Swap(&other->vid_mapping_file_);
  callset_mapping_file_.Swap(&other->callset_mapping_file_);
  std::swap(treat_deletions_as_intervals_, other->treat_deletions_as_intervals_);
  std::swap(num_parallel_vcf_files_, other->num_parallel_vcf_files_);
  std::swap(delete_and_create_tiledb_array_, other->delete_and_create_tiledb_array_);
  std::swap(do_ping_pong_buffering_, other->do_ping_pong_buffering_);
  std::swap(offload_vcf_output_processing_, other->offload_vcf_output_processing_);
  std::swap(discard_vcf_index_, other->discard_vcf_index_);
  std::swap(segment_size_, other->segment_size_);
  std::swap(compress_tiledb_array_, other->compress_tiledb_array_);
  std::swap(num_cells_per_tile_, other->num_cells_per_tile_);
  std::swap(fail_if_updating_, other->fail_if_updating_);
  std::swap(gatk4_integration_parameters_, other->gatk4_integration_parameters_);
  std::swap(tiledb_compression_level_, other->tiledb_compression_level_);
  std::swap(consolidate_tiledb_array_after_load_, other->consolidate_tiledb_array_after_load_);
  std::swap(disable_synced_writes_, other->disable_synced_writes_);
  std::swap(ignore_cells_not_in_partition_, other->ignore_cells_not_in_partition_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImportConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImportConfiguration_descriptor_;
  metadata.reflection = ImportConfiguration_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImportConfiguration

// required int64 size_per_column_partition = 7 [default = 16384];
bool ImportConfiguration::has_size_per_column_partition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImportConfiguration::set_has_size_per_column_partition() {
  _has_bits_[0] |= 0x00000001u;
}
void ImportConfiguration::clear_has_size_per_column_partition() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImportConfiguration::clear_size_per_column_partition() {
  size_per_column_partition_ = GOOGLE_LONGLONG(16384);
  clear_has_size_per_column_partition();
}
 ::google::protobuf::int64 ImportConfiguration::size_per_column_partition() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.size_per_column_partition)
  return size_per_column_partition_;
}
 void ImportConfiguration::set_size_per_column_partition(::google::protobuf::int64 value) {
  set_has_size_per_column_partition();
  size_per_column_partition_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.size_per_column_partition)
}

// optional bool row_based_partitioning = 1 [default = false];
bool ImportConfiguration::has_row_based_partitioning() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImportConfiguration::set_has_row_based_partitioning() {
  _has_bits_[0] |= 0x00000002u;
}
void ImportConfiguration::clear_has_row_based_partitioning() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImportConfiguration::clear_row_based_partitioning() {
  row_based_partitioning_ = false;
  clear_has_row_based_partitioning();
}
 bool ImportConfiguration::row_based_partitioning() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.row_based_partitioning)
  return row_based_partitioning_;
}
 void ImportConfiguration::set_row_based_partitioning(bool value) {
  set_has_row_based_partitioning();
  row_based_partitioning_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.row_based_partitioning)
}

// optional bool produce_combined_vcf = 2 [default = false];
bool ImportConfiguration::has_produce_combined_vcf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImportConfiguration::set_has_produce_combined_vcf() {
  _has_bits_[0] |= 0x00000004u;
}
void ImportConfiguration::clear_has_produce_combined_vcf() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImportConfiguration::clear_produce_combined_vcf() {
  produce_combined_vcf_ = false;
  clear_has_produce_combined_vcf();
}
 bool ImportConfiguration::produce_combined_vcf() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.produce_combined_vcf)
  return produce_combined_vcf_;
}
 void ImportConfiguration::set_produce_combined_vcf(bool value) {
  set_has_produce_combined_vcf();
  produce_combined_vcf_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.produce_combined_vcf)
}

// optional bool produce_tiledb_array = 3 [default = true];
bool ImportConfiguration::has_produce_tiledb_array() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ImportConfiguration::set_has_produce_tiledb_array() {
  _has_bits_[0] |= 0x00000008u;
}
void ImportConfiguration::clear_has_produce_tiledb_array() {
  _has_bits_[0] &= ~0x00000008u;
}
void ImportConfiguration::clear_produce_tiledb_array() {
  produce_tiledb_array_ = true;
  clear_has_produce_tiledb_array();
}
 bool ImportConfiguration::produce_tiledb_array() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.produce_tiledb_array)
  return produce_tiledb_array_;
}
 void ImportConfiguration::set_produce_tiledb_array(bool value) {
  set_has_produce_tiledb_array();
  produce_tiledb_array_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.produce_tiledb_array)
}

// repeated .Partition column_partitions = 4;
int ImportConfiguration::column_partitions_size() const {
  return column_partitions_.size();
}
void ImportConfiguration::clear_column_partitions() {
  column_partitions_.Clear();
}
const ::Partition& ImportConfiguration::column_partitions(int index) const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.column_partitions)
  return column_partitions_.Get(index);
}
::Partition* ImportConfiguration::mutable_column_partitions(int index) {
  // @@protoc_insertion_point(field_mutable:ImportConfiguration.column_partitions)
  return column_partitions_.Mutable(index);
}
::Partition* ImportConfiguration::add_column_partitions() {
  // @@protoc_insertion_point(field_add:ImportConfiguration.column_partitions)
  return column_partitions_.Add();
}
::google::protobuf::RepeatedPtrField< ::Partition >*
ImportConfiguration::mutable_column_partitions() {
  // @@protoc_insertion_point(field_mutable_list:ImportConfiguration.column_partitions)
  return &column_partitions_;
}
const ::google::protobuf::RepeatedPtrField< ::Partition >&
ImportConfiguration::column_partitions() const {
  // @@protoc_insertion_point(field_list:ImportConfiguration.column_partitions)
  return column_partitions_;
}

// optional string vid_mapping_file = 5;
bool ImportConfiguration::has_vid_mapping_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ImportConfiguration::set_has_vid_mapping_file() {
  _has_bits_[0] |= 0x00000020u;
}
void ImportConfiguration::clear_has_vid_mapping_file() {
  _has_bits_[0] &= ~0x00000020u;
}
void ImportConfiguration::clear_vid_mapping_file() {
  vid_mapping_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vid_mapping_file();
}
 const ::std::string& ImportConfiguration::vid_mapping_file() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.vid_mapping_file)
  return vid_mapping_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportConfiguration::set_vid_mapping_file(const ::std::string& value) {
  set_has_vid_mapping_file();
  vid_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImportConfiguration.vid_mapping_file)
}
 void ImportConfiguration::set_vid_mapping_file(const char* value) {
  set_has_vid_mapping_file();
  vid_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImportConfiguration.vid_mapping_file)
}
 void ImportConfiguration::set_vid_mapping_file(const char* value, size_t size) {
  set_has_vid_mapping_file();
  vid_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImportConfiguration.vid_mapping_file)
}
 ::std::string* ImportConfiguration::mutable_vid_mapping_file() {
  set_has_vid_mapping_file();
  // @@protoc_insertion_point(field_mutable:ImportConfiguration.vid_mapping_file)
  return vid_mapping_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImportConfiguration::release_vid_mapping_file() {
  // @@protoc_insertion_point(field_release:ImportConfiguration.vid_mapping_file)
  clear_has_vid_mapping_file();
  return vid_mapping_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportConfiguration::set_allocated_vid_mapping_file(::std::string* vid_mapping_file) {
  if (vid_mapping_file != NULL) {
    set_has_vid_mapping_file();
  } else {
    clear_has_vid_mapping_file();
  }
  vid_mapping_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vid_mapping_file);
  // @@protoc_insertion_point(field_set_allocated:ImportConfiguration.vid_mapping_file)
}

// optional string callset_mapping_file = 6;
bool ImportConfiguration::has_callset_mapping_file() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ImportConfiguration::set_has_callset_mapping_file() {
  _has_bits_[0] |= 0x00000040u;
}
void ImportConfiguration::clear_has_callset_mapping_file() {
  _has_bits_[0] &= ~0x00000040u;
}
void ImportConfiguration::clear_callset_mapping_file() {
  callset_mapping_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_callset_mapping_file();
}
 const ::std::string& ImportConfiguration::callset_mapping_file() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.callset_mapping_file)
  return callset_mapping_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportConfiguration::set_callset_mapping_file(const ::std::string& value) {
  set_has_callset_mapping_file();
  callset_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ImportConfiguration.callset_mapping_file)
}
 void ImportConfiguration::set_callset_mapping_file(const char* value) {
  set_has_callset_mapping_file();
  callset_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ImportConfiguration.callset_mapping_file)
}
 void ImportConfiguration::set_callset_mapping_file(const char* value, size_t size) {
  set_has_callset_mapping_file();
  callset_mapping_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ImportConfiguration.callset_mapping_file)
}
 ::std::string* ImportConfiguration::mutable_callset_mapping_file() {
  set_has_callset_mapping_file();
  // @@protoc_insertion_point(field_mutable:ImportConfiguration.callset_mapping_file)
  return callset_mapping_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImportConfiguration::release_callset_mapping_file() {
  // @@protoc_insertion_point(field_release:ImportConfiguration.callset_mapping_file)
  clear_has_callset_mapping_file();
  return callset_mapping_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImportConfiguration::set_allocated_callset_mapping_file(::std::string* callset_mapping_file) {
  if (callset_mapping_file != NULL) {
    set_has_callset_mapping_file();
  } else {
    clear_has_callset_mapping_file();
  }
  callset_mapping_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), callset_mapping_file);
  // @@protoc_insertion_point(field_set_allocated:ImportConfiguration.callset_mapping_file)
}

// optional bool treat_deletions_as_intervals = 8 [default = true];
bool ImportConfiguration::has_treat_deletions_as_intervals() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ImportConfiguration::set_has_treat_deletions_as_intervals() {
  _has_bits_[0] |= 0x00000080u;
}
void ImportConfiguration::clear_has_treat_deletions_as_intervals() {
  _has_bits_[0] &= ~0x00000080u;
}
void ImportConfiguration::clear_treat_deletions_as_intervals() {
  treat_deletions_as_intervals_ = true;
  clear_has_treat_deletions_as_intervals();
}
 bool ImportConfiguration::treat_deletions_as_intervals() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.treat_deletions_as_intervals)
  return treat_deletions_as_intervals_;
}
 void ImportConfiguration::set_treat_deletions_as_intervals(bool value) {
  set_has_treat_deletions_as_intervals();
  treat_deletions_as_intervals_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.treat_deletions_as_intervals)
}

// optional int32 num_parallel_vcf_files = 9 [default = 1];
bool ImportConfiguration::has_num_parallel_vcf_files() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ImportConfiguration::set_has_num_parallel_vcf_files() {
  _has_bits_[0] |= 0x00000100u;
}
void ImportConfiguration::clear_has_num_parallel_vcf_files() {
  _has_bits_[0] &= ~0x00000100u;
}
void ImportConfiguration::clear_num_parallel_vcf_files() {
  num_parallel_vcf_files_ = 1;
  clear_has_num_parallel_vcf_files();
}
 ::google::protobuf::int32 ImportConfiguration::num_parallel_vcf_files() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.num_parallel_vcf_files)
  return num_parallel_vcf_files_;
}
 void ImportConfiguration::set_num_parallel_vcf_files(::google::protobuf::int32 value) {
  set_has_num_parallel_vcf_files();
  num_parallel_vcf_files_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.num_parallel_vcf_files)
}

// optional bool delete_and_create_tiledb_array = 10 [default = false];
bool ImportConfiguration::has_delete_and_create_tiledb_array() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ImportConfiguration::set_has_delete_and_create_tiledb_array() {
  _has_bits_[0] |= 0x00000200u;
}
void ImportConfiguration::clear_has_delete_and_create_tiledb_array() {
  _has_bits_[0] &= ~0x00000200u;
}
void ImportConfiguration::clear_delete_and_create_tiledb_array() {
  delete_and_create_tiledb_array_ = false;
  clear_has_delete_and_create_tiledb_array();
}
 bool ImportConfiguration::delete_and_create_tiledb_array() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.delete_and_create_tiledb_array)
  return delete_and_create_tiledb_array_;
}
 void ImportConfiguration::set_delete_and_create_tiledb_array(bool value) {
  set_has_delete_and_create_tiledb_array();
  delete_and_create_tiledb_array_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.delete_and_create_tiledb_array)
}

// optional bool do_ping_pong_buffering = 11 [default = true];
bool ImportConfiguration::has_do_ping_pong_buffering() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ImportConfiguration::set_has_do_ping_pong_buffering() {
  _has_bits_[0] |= 0x00000400u;
}
void ImportConfiguration::clear_has_do_ping_pong_buffering() {
  _has_bits_[0] &= ~0x00000400u;
}
void ImportConfiguration::clear_do_ping_pong_buffering() {
  do_ping_pong_buffering_ = true;
  clear_has_do_ping_pong_buffering();
}
 bool ImportConfiguration::do_ping_pong_buffering() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.do_ping_pong_buffering)
  return do_ping_pong_buffering_;
}
 void ImportConfiguration::set_do_ping_pong_buffering(bool value) {
  set_has_do_ping_pong_buffering();
  do_ping_pong_buffering_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.do_ping_pong_buffering)
}

// optional bool offload_vcf_output_processing = 12 [default = true];
bool ImportConfiguration::has_offload_vcf_output_processing() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ImportConfiguration::set_has_offload_vcf_output_processing() {
  _has_bits_[0] |= 0x00000800u;
}
void ImportConfiguration::clear_has_offload_vcf_output_processing() {
  _has_bits_[0] &= ~0x00000800u;
}
void ImportConfiguration::clear_offload_vcf_output_processing() {
  offload_vcf_output_processing_ = true;
  clear_has_offload_vcf_output_processing();
}
 bool ImportConfiguration::offload_vcf_output_processing() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.offload_vcf_output_processing)
  return offload_vcf_output_processing_;
}
 void ImportConfiguration::set_offload_vcf_output_processing(bool value) {
  set_has_offload_vcf_output_processing();
  offload_vcf_output_processing_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.offload_vcf_output_processing)
}

// optional bool discard_vcf_index = 13 [default = true];
bool ImportConfiguration::has_discard_vcf_index() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ImportConfiguration::set_has_discard_vcf_index() {
  _has_bits_[0] |= 0x00001000u;
}
void ImportConfiguration::clear_has_discard_vcf_index() {
  _has_bits_[0] &= ~0x00001000u;
}
void ImportConfiguration::clear_discard_vcf_index() {
  discard_vcf_index_ = true;
  clear_has_discard_vcf_index();
}
 bool ImportConfiguration::discard_vcf_index() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.discard_vcf_index)
  return discard_vcf_index_;
}
 void ImportConfiguration::set_discard_vcf_index(bool value) {
  set_has_discard_vcf_index();
  discard_vcf_index_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.discard_vcf_index)
}

// optional int64 segment_size = 14 [default = 10485760];
bool ImportConfiguration::has_segment_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ImportConfiguration::set_has_segment_size() {
  _has_bits_[0] |= 0x00002000u;
}
void ImportConfiguration::clear_has_segment_size() {
  _has_bits_[0] &= ~0x00002000u;
}
void ImportConfiguration::clear_segment_size() {
  segment_size_ = GOOGLE_LONGLONG(10485760);
  clear_has_segment_size();
}
 ::google::protobuf::int64 ImportConfiguration::segment_size() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.segment_size)
  return segment_size_;
}
 void ImportConfiguration::set_segment_size(::google::protobuf::int64 value) {
  set_has_segment_size();
  segment_size_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.segment_size)
}

// optional bool compress_tiledb_array = 15 [default = true];
bool ImportConfiguration::has_compress_tiledb_array() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ImportConfiguration::set_has_compress_tiledb_array() {
  _has_bits_[0] |= 0x00004000u;
}
void ImportConfiguration::clear_has_compress_tiledb_array() {
  _has_bits_[0] &= ~0x00004000u;
}
void ImportConfiguration::clear_compress_tiledb_array() {
  compress_tiledb_array_ = true;
  clear_has_compress_tiledb_array();
}
 bool ImportConfiguration::compress_tiledb_array() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.compress_tiledb_array)
  return compress_tiledb_array_;
}
 void ImportConfiguration::set_compress_tiledb_array(bool value) {
  set_has_compress_tiledb_array();
  compress_tiledb_array_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.compress_tiledb_array)
}

// optional int64 num_cells_per_tile = 16 [default = 1000];
bool ImportConfiguration::has_num_cells_per_tile() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ImportConfiguration::set_has_num_cells_per_tile() {
  _has_bits_[0] |= 0x00008000u;
}
void ImportConfiguration::clear_has_num_cells_per_tile() {
  _has_bits_[0] &= ~0x00008000u;
}
void ImportConfiguration::clear_num_cells_per_tile() {
  num_cells_per_tile_ = GOOGLE_LONGLONG(1000);
  clear_has_num_cells_per_tile();
}
 ::google::protobuf::int64 ImportConfiguration::num_cells_per_tile() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.num_cells_per_tile)
  return num_cells_per_tile_;
}
 void ImportConfiguration::set_num_cells_per_tile(::google::protobuf::int64 value) {
  set_has_num_cells_per_tile();
  num_cells_per_tile_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.num_cells_per_tile)
}

// optional bool fail_if_updating = 17 [default = false];
bool ImportConfiguration::has_fail_if_updating() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ImportConfiguration::set_has_fail_if_updating() {
  _has_bits_[0] |= 0x00010000u;
}
void ImportConfiguration::clear_has_fail_if_updating() {
  _has_bits_[0] &= ~0x00010000u;
}
void ImportConfiguration::clear_fail_if_updating() {
  fail_if_updating_ = false;
  clear_has_fail_if_updating();
}
 bool ImportConfiguration::fail_if_updating() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.fail_if_updating)
  return fail_if_updating_;
}
 void ImportConfiguration::set_fail_if_updating(bool value) {
  set_has_fail_if_updating();
  fail_if_updating_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.fail_if_updating)
}

// optional .GATK4Integration gatk4_integration_parameters = 18;
bool ImportConfiguration::has_gatk4_integration_parameters() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ImportConfiguration::set_has_gatk4_integration_parameters() {
  _has_bits_[0] |= 0x00020000u;
}
void ImportConfiguration::clear_has_gatk4_integration_parameters() {
  _has_bits_[0] &= ~0x00020000u;
}
void ImportConfiguration::clear_gatk4_integration_parameters() {
  if (gatk4_integration_parameters_ != NULL) gatk4_integration_parameters_->::GATK4Integration::Clear();
  clear_has_gatk4_integration_parameters();
}
const ::GATK4Integration& ImportConfiguration::gatk4_integration_parameters() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.gatk4_integration_parameters)
  return gatk4_integration_parameters_ != NULL ? *gatk4_integration_parameters_ : *default_instance_->gatk4_integration_parameters_;
}
::GATK4Integration* ImportConfiguration::mutable_gatk4_integration_parameters() {
  set_has_gatk4_integration_parameters();
  if (gatk4_integration_parameters_ == NULL) {
    gatk4_integration_parameters_ = new ::GATK4Integration;
  }
  // @@protoc_insertion_point(field_mutable:ImportConfiguration.gatk4_integration_parameters)
  return gatk4_integration_parameters_;
}
::GATK4Integration* ImportConfiguration::release_gatk4_integration_parameters() {
  // @@protoc_insertion_point(field_release:ImportConfiguration.gatk4_integration_parameters)
  clear_has_gatk4_integration_parameters();
  ::GATK4Integration* temp = gatk4_integration_parameters_;
  gatk4_integration_parameters_ = NULL;
  return temp;
}
void ImportConfiguration::set_allocated_gatk4_integration_parameters(::GATK4Integration* gatk4_integration_parameters) {
  delete gatk4_integration_parameters_;
  gatk4_integration_parameters_ = gatk4_integration_parameters;
  if (gatk4_integration_parameters) {
    set_has_gatk4_integration_parameters();
  } else {
    clear_has_gatk4_integration_parameters();
  }
  // @@protoc_insertion_point(field_set_allocated:ImportConfiguration.gatk4_integration_parameters)
}

// optional int32 tiledb_compression_level = 19 [default = -1];
bool ImportConfiguration::has_tiledb_compression_level() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ImportConfiguration::set_has_tiledb_compression_level() {
  _has_bits_[0] |= 0x00040000u;
}
void ImportConfiguration::clear_has_tiledb_compression_level() {
  _has_bits_[0] &= ~0x00040000u;
}
void ImportConfiguration::clear_tiledb_compression_level() {
  tiledb_compression_level_ = -1;
  clear_has_tiledb_compression_level();
}
 ::google::protobuf::int32 ImportConfiguration::tiledb_compression_level() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.tiledb_compression_level)
  return tiledb_compression_level_;
}
 void ImportConfiguration::set_tiledb_compression_level(::google::protobuf::int32 value) {
  set_has_tiledb_compression_level();
  tiledb_compression_level_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.tiledb_compression_level)
}

// optional bool consolidate_tiledb_array_after_load = 20 [default = false];
bool ImportConfiguration::has_consolidate_tiledb_array_after_load() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ImportConfiguration::set_has_consolidate_tiledb_array_after_load() {
  _has_bits_[0] |= 0x00080000u;
}
void ImportConfiguration::clear_has_consolidate_tiledb_array_after_load() {
  _has_bits_[0] &= ~0x00080000u;
}
void ImportConfiguration::clear_consolidate_tiledb_array_after_load() {
  consolidate_tiledb_array_after_load_ = false;
  clear_has_consolidate_tiledb_array_after_load();
}
 bool ImportConfiguration::consolidate_tiledb_array_after_load() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.consolidate_tiledb_array_after_load)
  return consolidate_tiledb_array_after_load_;
}
 void ImportConfiguration::set_consolidate_tiledb_array_after_load(bool value) {
  set_has_consolidate_tiledb_array_after_load();
  consolidate_tiledb_array_after_load_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.consolidate_tiledb_array_after_load)
}

// optional bool disable_synced_writes = 21 [default = true];
bool ImportConfiguration::has_disable_synced_writes() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ImportConfiguration::set_has_disable_synced_writes() {
  _has_bits_[0] |= 0x00100000u;
}
void ImportConfiguration::clear_has_disable_synced_writes() {
  _has_bits_[0] &= ~0x00100000u;
}
void ImportConfiguration::clear_disable_synced_writes() {
  disable_synced_writes_ = true;
  clear_has_disable_synced_writes();
}
 bool ImportConfiguration::disable_synced_writes() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.disable_synced_writes)
  return disable_synced_writes_;
}
 void ImportConfiguration::set_disable_synced_writes(bool value) {
  set_has_disable_synced_writes();
  disable_synced_writes_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.disable_synced_writes)
}

// optional bool ignore_cells_not_in_partition = 22;
bool ImportConfiguration::has_ignore_cells_not_in_partition() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void ImportConfiguration::set_has_ignore_cells_not_in_partition() {
  _has_bits_[0] |= 0x00200000u;
}
void ImportConfiguration::clear_has_ignore_cells_not_in_partition() {
  _has_bits_[0] &= ~0x00200000u;
}
void ImportConfiguration::clear_ignore_cells_not_in_partition() {
  ignore_cells_not_in_partition_ = false;
  clear_has_ignore_cells_not_in_partition();
}
 bool ImportConfiguration::ignore_cells_not_in_partition() const {
  // @@protoc_insertion_point(field_get:ImportConfiguration.ignore_cells_not_in_partition)
  return ignore_cells_not_in_partition_;
}
 void ImportConfiguration::set_ignore_cells_not_in_partition(bool value) {
  set_has_ignore_cells_not_in_partition();
  ignore_cells_not_in_partition_ = value;
  // @@protoc_insertion_point(field_set:ImportConfiguration.ignore_cells_not_in_partition)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
